#+Title: Unicode declarations for LaTeX documents
#+Author: Mark Armstrong & Musa Al-Hassy
#+Description: Generating ~newunicodechar~ declarations for
#+Description: LaTeX documents which use unicode.
#+Property: header-args:emacs-lisp :noweb yes :tangle no :exports results :wrap src latex  :eval never-export
#+Property: header-args:latex :tangle unicode.sty :exports code :comments link :noeval
#+options: toc:nil
#+LaTeX_header: \usepackage{unicode}

# Usage:
# #
# \usepackage{\string~"/unicode-sty/unicode"}

# Mention users can use \newunicodechar{op}{elaboration} to make their own.
# +latex_header: \usepackage{newunicodechar}

* COMMENT Generators for documentation
:PROPERTIES:
:CUSTOM_ID: COMMENT-Generators-for-documentation
:END:

These elisp snippets are provided for convient invocation with ~C-c C-c~.

To generate the PDF, first tangle to ensure the package is up to date.
#+begin_src emacs-lisp :results none
(org-babel-tangle)
(org-latex-export-to-pdf)
#+end_src

The HTML export is moved to ~index.html~ to be used as the homepage.
#+begin_src emacs-lisp :results none
(f-move (org-html-export-to-html) "index.html")
#+end_src

* HTML header settings                          :noexport:
:PROPERTIES:
:CUSTOM_ID: HTML-header-settings
:END:

Stylesheets!
#+HTML_HEAD: <link href="https://alhassy.github.io/org-notes-style.css" rel="stylesheet" type="text/css" />
#+HTML_HEAD: <link href="https://alhassy.github.io/floating-toc.css" rel="stylesheet" type="text/css" />

* Sample symbols                                                     :ignore:
  :PROPERTIES:
  :CUSTOM_ID: Sample-symbols
  :END:

#+begin_src emacs-lisp :results value :wrap "delme" :noeval
; (setq all-unicode-symbols nil)
(s-join " " (--map (format "%s" it) all-unicode-symbols))
#+end_src

❌ ✔ ∷ ∞ ∙ ∶ ‼ ⊝ ⊛ ⊚ ⨀ ⊙ ⊘ ⨂ ⊗ ⊖ ⨁ ⊕ ⟵ ⟶ ⇊ ↓ ↑ ↔ ← ⟿ ➩ ⇨ → ∣ ⊒ ⊐ ⊑ ⊏ ≳ ≲ ≩ ≧ ≨ ≦
≯ ≮ ≱ ≥ ≰ ≤ ≔ ≁ ∼ ≉ ≈ ≄ ≃ ≇ ≅ ≟ ≐ ≠ ↪ ↦ ∘ ╱ ╲ ⊓ ⊔ ⊥ ⊤ ⊎ ⊍ ∪ ∩ ⊆ ∋ ∉ ∈ ∅ ø ⊨ ⊣ ⊢
∃ ∀ ⇔ ⟺ ⇐ ⇒ ∧ ∨ ≢ ¬ ≡ ⌋ ⌊ ⌉ ⌈ ⌟ ⌞ ⌝ ⌜ ｝ ｛ ⁆ ⁅ ⟫ ⟪ ⦄ ⦃ ⟩ ⟨ ⦆ ⦅ — – ⋮ ⋯ … ⁼ ⁻ ⁺
⁹ ⁸ ⁷ ⁶ ⁵ ⁴ ³ ² ¹ ⁰ ᶻ ʸ ˣ ʷ ᵛ ᵘ ᵗ ˢ ʳ ᵖ ᵒ ⁿ ᵐ ˡ ᵏ ʲ ⁱ ʰ ᵍ ᶠ ᵉ ᵈ ᶜ ᵇ ᵃ ᵂ ⱽ ᵁ ᵀ ᴿ
ᴾ ᴼ ᴺ ᴹ ᴸ ᴷ ᴶ ᴵ ᴴ ᴳ ᴱ ᴰ ᴮ ᴬ ₌ ₋ ₊ ₉ ₈ ₇ ₆ ₅ ₄ ₃ ₂ ₁ ₀ ₓ ᵥ ᵤ ₜ ₛ ᵣ ₚ ₒ ₙ ₘ ₗ ₖ ⱼ
ᵢ ₕ ₑ ₐ φ ς ϖ ϰ ϑ ε Ω ω Ψ ψ Χ χ Φ ϕ Υ υ Τ τ Σ σ Ρ ρ Π π Ο ο Ξ ξ Ν ν Μ μ Λ λ Κ κ
Ι ι Θ θ Η η Ζ ζ Ε ϵ Δ δ Γ γ Β β Α α ℓ 𝓩 𝓨 𝓧 𝓦 𝓥 𝓤 𝓣 𝓢 𝓡 𝓠 𝓟 𝓞 𝓝 𝓜 𝓛 𝓚 𝓙 𝓘 𝓗 𝓖 𝓕
𝓔 𝓓 𝓒 𝓑 𝓐 𝔃 𝔂 𝔁 𝔀 𝓿 𝓾 𝓽 𝓼 𝓻 𝓺 𝓹 𝓸 𝓷 𝓶 𝓵 𝓴 𝓳 𝓲 𝓱 𝓰 𝓯 𝓮 𝓭 𝓬 𝓫 𝓪 𝒁 𝒀 𝑿 𝑾 𝑽 𝑼 𝑻 𝑺 𝑹
𝑸 𝑷 𝑶 𝑵 𝑴 𝑳 𝑲 𝑱 𝑰 𝑯 𝑮 𝑭 𝑬 𝑫 𝑪 𝑩 𝑨 𝒛 𝒚 𝒙 𝒘 𝒗 𝒖 𝒕 𝒔 𝒓 𝒒 𝒑 𝒐 𝒏 𝒍 𝒌 𝒋 𝒊 𝒉 𝒈 𝒇 𝒆 𝒅 𝒄
𝒃 𝒂 𝒵 𝒴 𝒳 𝒲 𝒱 𝒰 𝒯 𝒮 ℛ 𝒬 𝒫 𝒪 𝒩 ℳ ℒ 𝒦 𝒥 ℐ ℋ 𝒢 ℱ ℰ 𝒟 𝒞 ℬ 𝒜 𝓏 𝓎 𝓍 𝓌 𝓋 𝓊 𝓉 𝓈 𝓇 𝓆 𝓅 ℴ
𝓃 𝓂 𝓁 𝓀 𝒿 𝒾 𝒽 ℊ 𝒻 ℯ 𝒹 𝒸 𝒷 𝒶 𝟘 𝟡 𝟠 𝟟 𝟞 𝟝 𝟜 𝟛 𝟚 𝟙 ℤ 𝕐 𝕏 𝕎 𝕍 𝕌 𝕋 𝕊 ℝ ℚ ℙ 𝕆 ℕ 𝕄 𝕃 𝕂
𝕁 𝕀 ℍ 𝔾 𝔽 𝔼 𝔻 ℂ 𝔹 𝔸 𝕫 𝕪 𝕩 𝕨 𝕧 𝕦 𝕥 𝕤 𝕣 𝕢 𝕡 𝕠 𝕟 𝕞 𝕝 𝕜 𝕛 𝕚 𝕙 𝕘 𝕗 𝕖 𝕕 𝕔 𝕓 𝕒

#+latex: \centerline{\emph{Some} of the supported symbols}
#+toc: headlines 4

* About this file
  :PROPERTIES:
  :CUSTOM_ID: About-this-file
  :END:

# Wide margins: The PDF will likely never be printed, so avoid superfluous
# whitespace
#+LATEX_HEADER: \usepackage[hmargin=15mm,vmargin=15mm]{geometry}

# Let's squeez code to avoid needless whitespace
# +LATEX_HEADER: \usepackage{minted, multicol}
# +LATEX_HEADER: \BeforeBeginEnvironment{minted}{\begin{minipage}[t]{\linewidth}\begin{multicols}{2}}%
# +LATEX_HEADER: \AfterEndEnvironment{minted}{\end{multicols}\end{minipage}}%
# +latex_header: \setlength{\columnseprule}{0.1ex}

** Preamble                                    :ignore:
   :PROPERTIES:
   :CUSTOM_ID: Preamble
   :END:

In order to write LaTeX documents using unicode in the source code, we must
often tell LaTeX what we want the unicode characters to be rendered as.

There are at least two ways to inform LaTeX of unicode character translations;
- ~\DeclareUnicodeCharacter~; this command does not work with XeLaTeX or LuaLaTeX,
  which I use.
- ~\newunicodechar~; this command is provided by the newunicodechar package, which
  may not be pre-installed for all LaTeX users.

This collection uses the second.

If any characters look incorrect, that may be a font issue,
rather than an issue with this package.
But if you have recommendations for alternative translations,
such recommendations (or pull requests implementing them)
are welcome!

:TODO: recommend fonts

** Usage
   :PROPERTIES:
   :CUSTOM_ID: Usage
   :END:

This file generates (via Org Babel tangling) the file ~unicode.sty~.

#+begin_src latex :exports none
\ProvidesPackage{unicode}
#+end_src

#+RESULTS:
#+begin_export latex
\ProvidesPackage{unicode}
#+end_export

To use it, either place it in the same directory as your ~.tex~ file, and require
it via ~\usepackage{unicode}~.

Alternatively, place it in your ~texmf~ directory to allow global usage on your
system. That directory is commonly located at the following locations on various
OS's.
- Linux
  - =~/texmf/tex/latex/local/=
- Mac OS X
  - =/Users/<user name>/Library/texmf/tex/latex/local/=
- Windows 10 (and miktex)
  - =C:\Users\<user name>\Appdata\Local\MikTex\<number>\tex\latex\local\=
- Windows Vista/7
  - =C:\Users\<user name>\texmf\tex\latex\local\=
- Windows XP
  - =C:\Documents and Settings\<user name>\texmf\tex\latex\local\=

By default, we assume the standard ~pdflatex~ typesetting engine is used,
if you are using XeLaTeX or LuaLaTeX, then simply declare:
#+begin_example latex
\pdflatexfalse
#+end_example

** Required LaTeX packages
   :PROPERTIES:
   :CUSTOM_ID: Required-LaTeX-packages
   :END:

Of course we require the ~newunicodechar~ package to use that command.
#+begin_src latex
\usepackage{newunicodechar}

\usepackage{ifxetex, ifluatex} % Also used in agda.sty: xifthen

% https://tex.stackexchange.com/questions/47576/combining-ifxetex-and-ifluatex-with-the-logical-or-operation
\newif\ifpdflatex
\ifxetex
  \pdflatexfalse
\else
  \ifluatex
    \pdflatexfalse
  \else
    \pdflatextrue
  \fi
\fi

%\newif\ifpdflatex
%\pdflatextrue
%% To use other typesetting engines, declare the following:
%% \pdflatexfalse
#+end_src

#+RESULTS:
#+begin_export latex
\usepackage{newunicodechar}

\usepackage{ifxetex, ifluatex} % Also used in agda.sty: xifthen

% https://tex.stackexchange.com/questions/47576/combining-ifxetex-and-ifluatex-with-the-logical-or-operation
\newif\ifpdflatex
\ifxetex
  \pdflatexfalse
\else
  \ifluatex
    \pdflatexfalse
  \else
    \pdflatextrue
  \fi
\fi

%\newif\ifpdflatex
%\pdflatextrue
%% To use other typesetting engines, declare the following:
%% \pdflatexfalse
#+end_export

# See here for more on LaTeX conditionals: http://handyfloss.net/2007.08/latex-programming-how-to-implement-conditionals/
# +latex: \ifpdflatex HELLO \else WORLD \fi

The unicode-math package “provides a complete implementation of unicode maths
for XeLaTeX and LuaLaTeX”.
#+begin_src latex
\ifpdflatex
  \usepackage{pifont}
  \usepackage{stmaryrd}
  \usepackage{amsmath, amssymb, amsthm, latexsym, amscd, enumerate, bbm, etex, nicefrac, mathrsfs}
\else
  \usepackage{unicode-math}
\fi
#+end_src

#+RESULTS:
#+begin_export latex
\ifpdflatex
  \usepackage{pifont}
  \usepackage{stmaryrd}
  \usepackage{amsmath, amssymb, amsthm, latexsym, amscd, enumerate, bbm, etex, nicefrac, mathrsfs}
\else
  \usepackage{unicode-math}
\fi
#+end_export

** Contributing to this document
   :PROPERTIES:
   :CUSTOM_ID: Contributing-to-this-document
   :END:

This document is written in Emacs using Org mode.
While the exported PDF version, etc., show a collection of
LaTeX source blocks, these are in fact generated
by an Emacs Lisp script below.

That means that contributions to this document
should modify the Emacs Lisp script,
not ~unicode.sty~ or the LaTeX source blocks themselves.

** The Emacs Lisp script
   :PROPERTIES:
   :CUSTOM_ID: The-Emacs-Lisp-script
   :END:

In this document, several lists of unicode character, LaTeX translation pairs
are declared, and then “wrapped” into ~latex~ source blocks, using this function
to map the pairs into ~newunicodechar~ declarations.
#+Name: generator
#+begin_src emacs-lisp :results silent
(defvar all-unicode-symbols nil "The symbols our system accounts for")

(cl-defun generate-newunicodechars
    (translation-lists &optional (lwrapper "\\ensuremath{") (rwrapper "}"))
  ;; Build the string
  (s-join "\n"
    (loop for (character pdflatex-translation other-translation) in translation-lists
          for pdflatex-form = (format "\\newunicodechar{%s}{%s%s%s}" character  lwrapper pdflatex-translation rwrapper)
          for other-form    = (format "\\newunicodechar{%s}{%s%s%s}" character  lwrapper other-translation rwrapper)
          collect (and (add-to-list 'all-unicode-symbols character)
                    (if other-translation
                      (format "\\ifpdflatex\n  %s\n\\else\n  %s\n\\fi" pdflatex-form other-form)
                      pdflatex-form)))))

; (generate-newunicodechars '( (𝕩 \\mathbb{x})           (𝕪 t \\mathbb{y}) ))

;; C-c C-v C-b ⇒ Evaluate all source blocks
#+end_src

* 𝔹lackboard, 𝒞alligraphic, and 𝑩old-font
  :PROPERTIES:
  :CUSTOM_ID: 𝔹lackboard-𝒞alligraphic-and-𝑩old-font
  :END:

** Preamble                                    :ignore:
:PROPERTIES:
:CUSTOM_ID: Preamble
:END:

These lists are most likely complete, unless I have missed some characters aside
from Latin letters, Greek letters and Arabic numerals which should be included.

For Agda users, the unicode symbols may be entered using the following
sequences:
| Blackboard        | =\b𝓍=  |
| Calligraphic      | =\Mc𝓍= |
| Bold-font         | =\MI𝓍= |
| Bold Calligraphic | =\MC𝓍= |

#+begin_src latex
\ifpdflatex
  \DeclareMathAlphabet\mathbfcal{OMS}{cmsy}{b}{n}
\fi
#+end_src

#+RESULTS:
#+begin_export latex
\ifpdflatex
  \DeclareMathAlphabet\mathbfcal{OMS}{cmsy}{b}{n}
\fi
#+end_export

** 𝔹lackboard
   :PROPERTIES:
   :CUSTOM_ID: Blackboard
   :END:

*** Lowercase Latin
  :PROPERTIES:
  :CUSTOM_ID: Blackboard-Lowercase-Latin
  :END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((𝕒 \\mathbbm{a} \\mathbb{a})
          (𝕓 \\mathbbm{b} \\mathbb{b})
          (𝕔 \\mathbbm{c} \\mathbb{c})
          (𝕕 \\mathbbm{d} \\mathbb{d})
          (𝕖 \\mathbbm{e} \\mathbb{e})
          (𝕗 \\mathbbm{f} \\mathbb{f})
          (𝕘 \\mathbbm{g} \\mathbb{g})
          (𝕙 \\mathbbm{h} \\mathbb{h})
          (𝕚 \\mathbbm{i} \\mathbb{i})
          (𝕛 \\mathbbm{j} \\mathbb{j})
          (𝕜 \\mathbbm{k} \\mathbb{k})
          (𝕝 \\mathbbm{l} \\mathbb{l})
          (𝕞 \\mathbbm{m} \\mathbb{m})
          (𝕟 \\mathbbm{n} \\mathbb{n})
          (𝕠 \\mathbbm{o} \\mathbb{o})
          (𝕡 \\mathbbm{p} \\mathbb{p})
          (𝕢 \\mathbbm{q} \\mathbb{q})
          (𝕣 \\mathbbm{r} \\mathbb{r})
          (𝕤 \\mathbbm{s} \\mathbb{s})
          (𝕥 \\mathbbm{t} \\mathbb{t})
          (𝕦 \\mathbbm{u} \\mathbb{u})
          (𝕧 \\mathbbm{v} \\mathbb{v})
          (𝕨 \\mathbbm{w} \\mathbb{w})
          (𝕩 \\mathbbm{x} \\mathbb{x})
          (𝕪 \\mathbbm{y} \\mathbb{y})
          (𝕫 \\mathbbm{z} \\mathbb{z}))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\ifpdflatex
  \newunicodechar{𝕒}{\ensuremath{\mathbbm{a}}}
\else
  \newunicodechar{𝕒}{\ensuremath{\mathbb{a}}}
\fi
\ifpdflatex
  \newunicodechar{𝕓}{\ensuremath{\mathbbm{b}}}
\else
  \newunicodechar{𝕓}{\ensuremath{\mathbb{b}}}
\fi
\ifpdflatex
  \newunicodechar{𝕔}{\ensuremath{\mathbbm{c}}}
\else
  \newunicodechar{𝕔}{\ensuremath{\mathbb{c}}}
\fi
\ifpdflatex
  \newunicodechar{𝕕}{\ensuremath{\mathbbm{d}}}
\else
  \newunicodechar{𝕕}{\ensuremath{\mathbb{d}}}
\fi
\ifpdflatex
  \newunicodechar{𝕖}{\ensuremath{\mathbbm{e}}}
\else
  \newunicodechar{𝕖}{\ensuremath{\mathbb{e}}}
\fi
\ifpdflatex
  \newunicodechar{𝕗}{\ensuremath{\mathbbm{f}}}
\else
  \newunicodechar{𝕗}{\ensuremath{\mathbb{f}}}
\fi
\ifpdflatex
  \newunicodechar{𝕘}{\ensuremath{\mathbbm{g}}}
\else
  \newunicodechar{𝕘}{\ensuremath{\mathbb{g}}}
\fi
\ifpdflatex
  \newunicodechar{𝕙}{\ensuremath{\mathbbm{h}}}
\else
  \newunicodechar{𝕙}{\ensuremath{\mathbb{h}}}
\fi
\ifpdflatex
  \newunicodechar{𝕚}{\ensuremath{\mathbbm{i}}}
\else
  \newunicodechar{𝕚}{\ensuremath{\mathbb{i}}}
\fi
\ifpdflatex
  \newunicodechar{𝕛}{\ensuremath{\mathbbm{j}}}
\else
  \newunicodechar{𝕛}{\ensuremath{\mathbb{j}}}
\fi
\ifpdflatex
  \newunicodechar{𝕜}{\ensuremath{\mathbbm{k}}}
\else
  \newunicodechar{𝕜}{\ensuremath{\mathbb{k}}}
\fi
\ifpdflatex
  \newunicodechar{𝕝}{\ensuremath{\mathbbm{l}}}
\else
  \newunicodechar{𝕝}{\ensuremath{\mathbb{l}}}
\fi
\ifpdflatex
  \newunicodechar{𝕞}{\ensuremath{\mathbbm{m}}}
\else
  \newunicodechar{𝕞}{\ensuremath{\mathbb{m}}}
\fi
\ifpdflatex
  \newunicodechar{𝕟}{\ensuremath{\mathbbm{n}}}
\else
  \newunicodechar{𝕟}{\ensuremath{\mathbb{n}}}
\fi
\ifpdflatex
  \newunicodechar{𝕠}{\ensuremath{\mathbbm{o}}}
\else
  \newunicodechar{𝕠}{\ensuremath{\mathbb{o}}}
\fi
\ifpdflatex
  \newunicodechar{𝕡}{\ensuremath{\mathbbm{p}}}
\else
  \newunicodechar{𝕡}{\ensuremath{\mathbb{p}}}
\fi
\ifpdflatex
  \newunicodechar{𝕢}{\ensuremath{\mathbbm{q}}}
\else
  \newunicodechar{𝕢}{\ensuremath{\mathbb{q}}}
\fi
\ifpdflatex
  \newunicodechar{𝕣}{\ensuremath{\mathbbm{r}}}
\else
  \newunicodechar{𝕣}{\ensuremath{\mathbb{r}}}
\fi
\ifpdflatex
  \newunicodechar{𝕤}{\ensuremath{\mathbbm{s}}}
\else
  \newunicodechar{𝕤}{\ensuremath{\mathbb{s}}}
\fi
\ifpdflatex
  \newunicodechar{𝕥}{\ensuremath{\mathbbm{t}}}
\else
  \newunicodechar{𝕥}{\ensuremath{\mathbb{t}}}
\fi
\ifpdflatex
  \newunicodechar{𝕦}{\ensuremath{\mathbbm{u}}}
\else
  \newunicodechar{𝕦}{\ensuremath{\mathbb{u}}}
\fi
\ifpdflatex
  \newunicodechar{𝕧}{\ensuremath{\mathbbm{v}}}
\else
  \newunicodechar{𝕧}{\ensuremath{\mathbb{v}}}
\fi
\ifpdflatex
  \newunicodechar{𝕨}{\ensuremath{\mathbbm{w}}}
\else
  \newunicodechar{𝕨}{\ensuremath{\mathbb{w}}}
\fi
\ifpdflatex
  \newunicodechar{𝕩}{\ensuremath{\mathbbm{x}}}
\else
  \newunicodechar{𝕩}{\ensuremath{\mathbb{x}}}
\fi
\ifpdflatex
  \newunicodechar{𝕪}{\ensuremath{\mathbbm{y}}}
\else
  \newunicodechar{𝕪}{\ensuremath{\mathbb{y}}}
\fi
\ifpdflatex
  \newunicodechar{𝕫}{\ensuremath{\mathbbm{z}}}
\else
  \newunicodechar{𝕫}{\ensuremath{\mathbb{z}}}
\fi
#+end_src

#+RESULTS:
#+begin_export latex
\ifpdflatex
  \newunicodechar{𝕒}{\ensuremath{\mathbbm{a}}}
\else
  \newunicodechar{𝕒}{\ensuremath{\mathbb{a}}}
\fi
\ifpdflatex
  \newunicodechar{𝕓}{\ensuremath{\mathbbm{b}}}
\else
  \newunicodechar{𝕓}{\ensuremath{\mathbb{b}}}
\fi
\ifpdflatex
  \newunicodechar{𝕔}{\ensuremath{\mathbbm{c}}}
\else
  \newunicodechar{𝕔}{\ensuremath{\mathbb{c}}}
\fi
\ifpdflatex
  \newunicodechar{𝕕}{\ensuremath{\mathbbm{d}}}
\else
  \newunicodechar{𝕕}{\ensuremath{\mathbb{d}}}
\fi
\ifpdflatex
  \newunicodechar{𝕖}{\ensuremath{\mathbbm{e}}}
\else
  \newunicodechar{𝕖}{\ensuremath{\mathbb{e}}}
\fi
\ifpdflatex
  \newunicodechar{𝕗}{\ensuremath{\mathbbm{f}}}
\else
  \newunicodechar{𝕗}{\ensuremath{\mathbb{f}}}
\fi
\ifpdflatex
  \newunicodechar{𝕘}{\ensuremath{\mathbbm{g}}}
\else
  \newunicodechar{𝕘}{\ensuremath{\mathbb{g}}}
\fi
\ifpdflatex
  \newunicodechar{𝕙}{\ensuremath{\mathbbm{h}}}
\else
  \newunicodechar{𝕙}{\ensuremath{\mathbb{h}}}
\fi
\ifpdflatex
  \newunicodechar{𝕚}{\ensuremath{\mathbbm{i}}}
\else
  \newunicodechar{𝕚}{\ensuremath{\mathbb{i}}}
\fi
\ifpdflatex
  \newunicodechar{𝕛}{\ensuremath{\mathbbm{j}}}
\else
  \newunicodechar{𝕛}{\ensuremath{\mathbb{j}}}
\fi
\ifpdflatex
  \newunicodechar{𝕜}{\ensuremath{\mathbbm{k}}}
\else
  \newunicodechar{𝕜}{\ensuremath{\mathbb{k}}}
\fi
\ifpdflatex
  \newunicodechar{𝕝}{\ensuremath{\mathbbm{l}}}
\else
  \newunicodechar{𝕝}{\ensuremath{\mathbb{l}}}
\fi
\ifpdflatex
  \newunicodechar{𝕞}{\ensuremath{\mathbbm{m}}}
\else
  \newunicodechar{𝕞}{\ensuremath{\mathbb{m}}}
\fi
\ifpdflatex
  \newunicodechar{𝕟}{\ensuremath{\mathbbm{n}}}
\else
  \newunicodechar{𝕟}{\ensuremath{\mathbb{n}}}
\fi
\ifpdflatex
  \newunicodechar{𝕠}{\ensuremath{\mathbbm{o}}}
\else
  \newunicodechar{𝕠}{\ensuremath{\mathbb{o}}}
\fi
\ifpdflatex
  \newunicodechar{𝕡}{\ensuremath{\mathbbm{p}}}
\else
  \newunicodechar{𝕡}{\ensuremath{\mathbb{p}}}
\fi
\ifpdflatex
  \newunicodechar{𝕢}{\ensuremath{\mathbbm{q}}}
\else
  \newunicodechar{𝕢}{\ensuremath{\mathbb{q}}}
\fi
\ifpdflatex
  \newunicodechar{𝕣}{\ensuremath{\mathbbm{r}}}
\else
  \newunicodechar{𝕣}{\ensuremath{\mathbb{r}}}
\fi
\ifpdflatex
  \newunicodechar{𝕤}{\ensuremath{\mathbbm{s}}}
\else
  \newunicodechar{𝕤}{\ensuremath{\mathbb{s}}}
\fi
\ifpdflatex
  \newunicodechar{𝕥}{\ensuremath{\mathbbm{t}}}
\else
  \newunicodechar{𝕥}{\ensuremath{\mathbb{t}}}
\fi
\ifpdflatex
  \newunicodechar{𝕦}{\ensuremath{\mathbbm{u}}}
\else
  \newunicodechar{𝕦}{\ensuremath{\mathbb{u}}}
\fi
\ifpdflatex
  \newunicodechar{𝕧}{\ensuremath{\mathbbm{v}}}
\else
  \newunicodechar{𝕧}{\ensuremath{\mathbb{v}}}
\fi
\ifpdflatex
  \newunicodechar{𝕨}{\ensuremath{\mathbbm{w}}}
\else
  \newunicodechar{𝕨}{\ensuremath{\mathbb{w}}}
\fi
\ifpdflatex
  \newunicodechar{𝕩}{\ensuremath{\mathbbm{x}}}
\else
  \newunicodechar{𝕩}{\ensuremath{\mathbb{x}}}
\fi
\ifpdflatex
  \newunicodechar{𝕪}{\ensuremath{\mathbbm{y}}}
\else
  \newunicodechar{𝕪}{\ensuremath{\mathbb{y}}}
\fi
\ifpdflatex
  \newunicodechar{𝕫}{\ensuremath{\mathbbm{z}}}
\else
  \newunicodechar{𝕫}{\ensuremath{\mathbb{z}}}
\fi
#+end_export

*** Uppercase Latin
  :PROPERTIES:
  :CUSTOM_ID: Blackboard-Uppercase-Latin
  :END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((𝔸   \\mathbb{A})
          (𝔹   \\mathbb{B})
          (ℂ   \\mathbb{C})
          (𝔻   \\mathbb{D})
          (𝔼   \\mathbb{E})
          (𝔽   \\mathbb{F})
          (𝔾   \\mathbb{G})
          (ℍ   \\mathbb{H})
          (𝕀   \\mathbb{I})
          (𝕁   \\mathbb{J})
          (𝕂   \\mathbb{K})
          (𝕃   \\mathbb{L})
          (𝕄   \\mathbb{M})
          (ℕ   \\mathbb{N})
          (𝕆   \\mathbb{O})
          (ℙ   \\mathbb{P})
          (ℚ   \\mathbb{Q})
          (ℝ   \\mathbb{R})
          (𝕊   \\mathbb{S})
          (𝕋   \\mathbb{T})
          (𝕌   \\mathbb{U})
          (𝕍   \\mathbb{V})
          (𝕎   \\mathbb{W})
          (𝕏   \\mathbb{X})
          (𝕐   \\mathbb{Y})
          (ℤ   \\mathbb{Z}))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{𝔸}{\ensuremath{\mathbb{A}}}
\newunicodechar{𝔹}{\ensuremath{\mathbb{B}}}
\newunicodechar{ℂ}{\ensuremath{\mathbb{C}}}
\newunicodechar{𝔻}{\ensuremath{\mathbb{D}}}
\newunicodechar{𝔼}{\ensuremath{\mathbb{E}}}
\newunicodechar{𝔽}{\ensuremath{\mathbb{F}}}
\newunicodechar{𝔾}{\ensuremath{\mathbb{G}}}
\newunicodechar{ℍ}{\ensuremath{\mathbb{H}}}
\newunicodechar{𝕀}{\ensuremath{\mathbb{I}}}
\newunicodechar{𝕁}{\ensuremath{\mathbb{J}}}
\newunicodechar{𝕂}{\ensuremath{\mathbb{K}}}
\newunicodechar{𝕃}{\ensuremath{\mathbb{L}}}
\newunicodechar{𝕄}{\ensuremath{\mathbb{M}}}
\newunicodechar{ℕ}{\ensuremath{\mathbb{N}}}
\newunicodechar{𝕆}{\ensuremath{\mathbb{O}}}
\newunicodechar{ℙ}{\ensuremath{\mathbb{P}}}
\newunicodechar{ℚ}{\ensuremath{\mathbb{Q}}}
\newunicodechar{ℝ}{\ensuremath{\mathbb{R}}}
\newunicodechar{𝕊}{\ensuremath{\mathbb{S}}}
\newunicodechar{𝕋}{\ensuremath{\mathbb{T}}}
\newunicodechar{𝕌}{\ensuremath{\mathbb{U}}}
\newunicodechar{𝕍}{\ensuremath{\mathbb{V}}}
\newunicodechar{𝕎}{\ensuremath{\mathbb{W}}}
\newunicodechar{𝕏}{\ensuremath{\mathbb{X}}}
\newunicodechar{𝕐}{\ensuremath{\mathbb{Y}}}
\newunicodechar{ℤ}{\ensuremath{\mathbb{Z}}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{𝔸}{\ensuremath{\mathbb{A}}}
\newunicodechar{𝔹}{\ensuremath{\mathbb{B}}}
\newunicodechar{ℂ}{\ensuremath{\mathbb{C}}}
\newunicodechar{𝔻}{\ensuremath{\mathbb{D}}}
\newunicodechar{𝔼}{\ensuremath{\mathbb{E}}}
\newunicodechar{𝔽}{\ensuremath{\mathbb{F}}}
\newunicodechar{𝔾}{\ensuremath{\mathbb{G}}}
\newunicodechar{ℍ}{\ensuremath{\mathbb{H}}}
\newunicodechar{𝕀}{\ensuremath{\mathbb{I}}}
\newunicodechar{𝕁}{\ensuremath{\mathbb{J}}}
\newunicodechar{𝕂}{\ensuremath{\mathbb{K}}}
\newunicodechar{𝕃}{\ensuremath{\mathbb{L}}}
\newunicodechar{𝕄}{\ensuremath{\mathbb{M}}}
\newunicodechar{ℕ}{\ensuremath{\mathbb{N}}}
\newunicodechar{𝕆}{\ensuremath{\mathbb{O}}}
\newunicodechar{ℙ}{\ensuremath{\mathbb{P}}}
\newunicodechar{ℚ}{\ensuremath{\mathbb{Q}}}
\newunicodechar{ℝ}{\ensuremath{\mathbb{R}}}
\newunicodechar{𝕊}{\ensuremath{\mathbb{S}}}
\newunicodechar{𝕋}{\ensuremath{\mathbb{T}}}
\newunicodechar{𝕌}{\ensuremath{\mathbb{U}}}
\newunicodechar{𝕍}{\ensuremath{\mathbb{V}}}
\newunicodechar{𝕎}{\ensuremath{\mathbb{W}}}
\newunicodechar{𝕏}{\ensuremath{\mathbb{X}}}
\newunicodechar{𝕐}{\ensuremath{\mathbb{Y}}}
\newunicodechar{ℤ}{\ensuremath{\mathbb{Z}}}
#+end_export

*** Arabic Numerals
  :PROPERTIES:
  :CUSTOM_ID: Blackboard-Arabic-Numerals
  :END:
# \newunicodechar{𝟙}{\ensuremath{\mathbf{1}}}

#+begin_src latex
% For double stroke digits with pdflatex
\usepackage[bbgreekl]{mathbbol}
\DeclareSymbolFontAlphabet{\mathbbl}{bbold}
#+end_src

#+RESULTS:
#+begin_export latex
% For double stroke digits with pdflatex
\usepackage[bbgreekl]{mathbbol}
\DeclareSymbolFontAlphabet{\mathbbl}{bbold}
#+end_export

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((𝟙 \\mathbbl{1} \\mathbb{1})
          (𝟚 \\mathbbl{2} \\mathbb{2})
          (𝟛 \\mathbbl{3} \\mathbb{3})
          (𝟜 \\mathbbl{4} \\mathbb{4})
          (𝟝 \\mathbbl{5} \\mathbb{5})
          (𝟞 \\mathbbl{6} \\mathbb{6})
          (𝟟 \\mathbbl{7} \\mathbb{7})
          (𝟠 \\mathbbl{8} \\mathbb{8})
          (𝟡 \\mathbbl{9} \\mathbb{9})
          (𝟘 \\mathbbl{0} \\mathbb{0}))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\ifpdflatex
  \newunicodechar{𝟙}{\ensuremath{\mathbbl{1}}}
\else
  \newunicodechar{𝟙}{\ensuremath{\mathbb{1}}}
\fi
\ifpdflatex
  \newunicodechar{𝟚}{\ensuremath{\mathbbl{2}}}
\else
  \newunicodechar{𝟚}{\ensuremath{\mathbb{2}}}
\fi
\ifpdflatex
  \newunicodechar{𝟛}{\ensuremath{\mathbbl{3}}}
\else
  \newunicodechar{𝟛}{\ensuremath{\mathbb{3}}}
\fi
\ifpdflatex
  \newunicodechar{𝟜}{\ensuremath{\mathbbl{4}}}
\else
  \newunicodechar{𝟜}{\ensuremath{\mathbb{4}}}
\fi
\ifpdflatex
  \newunicodechar{𝟝}{\ensuremath{\mathbbl{5}}}
\else
  \newunicodechar{𝟝}{\ensuremath{\mathbb{5}}}
\fi
\ifpdflatex
  \newunicodechar{𝟞}{\ensuremath{\mathbbl{6}}}
\else
  \newunicodechar{𝟞}{\ensuremath{\mathbb{6}}}
\fi
\ifpdflatex
  \newunicodechar{𝟟}{\ensuremath{\mathbbl{7}}}
\else
  \newunicodechar{𝟟}{\ensuremath{\mathbb{7}}}
\fi
\ifpdflatex
  \newunicodechar{𝟠}{\ensuremath{\mathbbl{8}}}
\else
  \newunicodechar{𝟠}{\ensuremath{\mathbb{8}}}
\fi
\ifpdflatex
  \newunicodechar{𝟡}{\ensuremath{\mathbbl{9}}}
\else
  \newunicodechar{𝟡}{\ensuremath{\mathbb{9}}}
\fi
\ifpdflatex
  \newunicodechar{𝟘}{\ensuremath{\mathbbl{0}}}
\else
  \newunicodechar{𝟘}{\ensuremath{\mathbb{0}}}
\fi
#+end_src

#+RESULTS:
#+begin_export latex
\ifpdflatex
  \newunicodechar{𝟙}{\ensuremath{\mathbbl{1}}}
\else
  \newunicodechar{𝟙}{\ensuremath{\mathbb{1}}}
\fi
\ifpdflatex
  \newunicodechar{𝟚}{\ensuremath{\mathbbl{2}}}
\else
  \newunicodechar{𝟚}{\ensuremath{\mathbb{2}}}
\fi
\ifpdflatex
  \newunicodechar{𝟛}{\ensuremath{\mathbbl{3}}}
\else
  \newunicodechar{𝟛}{\ensuremath{\mathbb{3}}}
\fi
\ifpdflatex
  \newunicodechar{𝟜}{\ensuremath{\mathbbl{4}}}
\else
  \newunicodechar{𝟜}{\ensuremath{\mathbb{4}}}
\fi
\ifpdflatex
  \newunicodechar{𝟝}{\ensuremath{\mathbbl{5}}}
\else
  \newunicodechar{𝟝}{\ensuremath{\mathbb{5}}}
\fi
\ifpdflatex
  \newunicodechar{𝟞}{\ensuremath{\mathbbl{6}}}
\else
  \newunicodechar{𝟞}{\ensuremath{\mathbb{6}}}
\fi
\ifpdflatex
  \newunicodechar{𝟟}{\ensuremath{\mathbbl{7}}}
\else
  \newunicodechar{𝟟}{\ensuremath{\mathbb{7}}}
\fi
\ifpdflatex
  \newunicodechar{𝟠}{\ensuremath{\mathbbl{8}}}
\else
  \newunicodechar{𝟠}{\ensuremath{\mathbb{8}}}
\fi
\ifpdflatex
  \newunicodechar{𝟡}{\ensuremath{\mathbbl{9}}}
\else
  \newunicodechar{𝟡}{\ensuremath{\mathbb{9}}}
\fi
\ifpdflatex
  \newunicodechar{𝟘}{\ensuremath{\mathbbl{0}}}
\else
  \newunicodechar{𝟘}{\ensuremath{\mathbb{0}}}
\fi
#+end_export

*** COMMENT Greek
    :PROPERTIES:
    :CUSTOM_ID: COMMENT-Greek
    :END:

There are unfortunately not many included in Unicode.

#+begin_src emacs-lisp
(when nil
<<generator>>
(let ((the-translations
        '((ℾ TODO \\mathbb{\\Gamma})
          (ℽ TODO \\mathbb{\\gamma})
          (ℿ TODO \\mathbb{\\Pi})
          (ℼ TODO \\mathbb{\\pi})
          (⅀ TODO \\mathbb{\\Sum}))))
  (generate-newunicodechars the-translations)))
#+end_src

#+RESULTS:
#+begin_src latex
\ifpdflatex
  \newunicodechar{ℾ}{\ensuremath{TODO}}
\else
  \newunicodechar{ℾ}{\ensuremath{\mathbb{\Gamma}}}
\fi
\ifpdflatex
  \newunicodechar{ℽ}{\ensuremath{TODO}}
\else
  \newunicodechar{ℽ}{\ensuremath{\mathbb{\gamma}}}
\fi
\ifpdflatex
  \newunicodechar{ℿ}{\ensuremath{TODO}}
\else
  \newunicodechar{ℿ}{\ensuremath{\mathbb{\Pi}}}
\fi
\ifpdflatex
  \newunicodechar{ℼ}{\ensuremath{TODO}}
\else
  \newunicodechar{ℼ}{\ensuremath{\mathbb{\pi}}}
\fi
\ifpdflatex
  \newunicodechar{⅀}{\ensuremath{TODO}}
\else
  \newunicodechar{⅀}{\ensuremath{\mathbb{\Sum}}}
\fi
#+end_src

#+RESULTS:
#+begin_export latex
\ifpdflatex
  \newunicodechar{ℾ}{\ensuremath{TODO}}
\else
  \newunicodechar{ℾ}{\ensuremath{\mathbb{\Gamma}}}
\fi
\ifpdflatex
  \newunicodechar{ℽ}{\ensuremath{TODO}}
\else
  \newunicodechar{ℽ}{\ensuremath{\mathbb{\gamma}}}
\fi
\ifpdflatex
  \newunicodechar{ℿ}{\ensuremath{TODO}}
\else
  \newunicodechar{ℿ}{\ensuremath{\mathbb{\Pi}}}
\fi
\ifpdflatex
  \newunicodechar{ℼ}{\ensuremath{TODO}}
\else
  \newunicodechar{ℼ}{\ensuremath{\mathbb{\pi}}}
\fi
\ifpdflatex
  \newunicodechar{⅀}{\ensuremath{TODO}}
\else
  \newunicodechar{⅀}{\ensuremath{\mathbb{\Sum}}}
\fi
#+end_export

** 𝒞alligraphic
   :PROPERTIES:
   :CUSTOM_ID: Calligraphic
   :END:

*** Lowercase Latin
  :PROPERTIES:
  :CUSTOM_ID: Calligraphic-Lowercase-Latin
  :END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((𝒶 a \\mathcal{a})
          (𝒷 b \\mathcal{b})
          (𝒸 c \\mathcal{c})
          (𝒹 d \\mathcal{d})
          (ℯ e \\mathcal{e})
          (𝒻 f \\mathcal{f})
          (ℊ g \\mathcal{g})
          (𝒽 h \\mathcal{h})
          (𝒾 i \\mathcal{i})
          (𝒿 j \\mathcal{j})
          (𝓀 j \\mathcal{k})
          (𝓁 l \\mathcal{l})
          (𝓂 m \\mathcal{m})
          (𝓃 n \\mathcal{n})
          (ℴ o \\mathcal{o})
          (𝓅 p \\mathcal{p})
          (𝓆 q \\mathcal{q})
          (𝓇 r \\mathcal{r})
          (𝓈 s \\mathcal{s})
          (𝓉 t \\mathcal{t})
          (𝓊 u \\mathcal{u})
          (𝓋 v \\mathcal{v})
          (𝓌 w \\mathcal{w})
          (𝓍 x \\mathcal{x})
          (𝓎 y \\mathcal{y})
          (𝓏 z \\mathcal{z}))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\ifpdflatex
  \newunicodechar{𝒶}{\ensuremath{a}}
\else
  \newunicodechar{𝒶}{\ensuremath{\mathcal{a}}}
\fi
\ifpdflatex
  \newunicodechar{𝒷}{\ensuremath{b}}
\else
  \newunicodechar{𝒷}{\ensuremath{\mathcal{b}}}
\fi
\ifpdflatex
  \newunicodechar{𝒸}{\ensuremath{c}}
\else
  \newunicodechar{𝒸}{\ensuremath{\mathcal{c}}}
\fi
\ifpdflatex
  \newunicodechar{𝒹}{\ensuremath{d}}
\else
  \newunicodechar{𝒹}{\ensuremath{\mathcal{d}}}
\fi
\ifpdflatex
  \newunicodechar{ℯ}{\ensuremath{e}}
\else
  \newunicodechar{ℯ}{\ensuremath{\mathcal{e}}}
\fi
\ifpdflatex
  \newunicodechar{𝒻}{\ensuremath{f}}
\else
  \newunicodechar{𝒻}{\ensuremath{\mathcal{f}}}
\fi
\ifpdflatex
  \newunicodechar{ℊ}{\ensuremath{g}}
\else
  \newunicodechar{ℊ}{\ensuremath{\mathcal{g}}}
\fi
\ifpdflatex
  \newunicodechar{𝒽}{\ensuremath{h}}
\else
  \newunicodechar{𝒽}{\ensuremath{\mathcal{h}}}
\fi
\ifpdflatex
  \newunicodechar{𝒾}{\ensuremath{i}}
\else
  \newunicodechar{𝒾}{\ensuremath{\mathcal{i}}}
\fi
\ifpdflatex
  \newunicodechar{𝒿}{\ensuremath{j}}
\else
  \newunicodechar{𝒿}{\ensuremath{\mathcal{j}}}
\fi
\ifpdflatex
  \newunicodechar{𝓀}{\ensuremath{j}}
\else
  \newunicodechar{𝓀}{\ensuremath{\mathcal{k}}}
\fi
\ifpdflatex
  \newunicodechar{𝓁}{\ensuremath{l}}
\else
  \newunicodechar{𝓁}{\ensuremath{\mathcal{l}}}
\fi
\ifpdflatex
  \newunicodechar{𝓂}{\ensuremath{m}}
\else
  \newunicodechar{𝓂}{\ensuremath{\mathcal{m}}}
\fi
\ifpdflatex
  \newunicodechar{𝓃}{\ensuremath{n}}
\else
  \newunicodechar{𝓃}{\ensuremath{\mathcal{n}}}
\fi
\ifpdflatex
  \newunicodechar{ℴ}{\ensuremath{o}}
\else
  \newunicodechar{ℴ}{\ensuremath{\mathcal{o}}}
\fi
\ifpdflatex
  \newunicodechar{𝓅}{\ensuremath{p}}
\else
  \newunicodechar{𝓅}{\ensuremath{\mathcal{p}}}
\fi
\ifpdflatex
  \newunicodechar{𝓆}{\ensuremath{q}}
\else
  \newunicodechar{𝓆}{\ensuremath{\mathcal{q}}}
\fi
\ifpdflatex
  \newunicodechar{𝓇}{\ensuremath{r}}
\else
  \newunicodechar{𝓇}{\ensuremath{\mathcal{r}}}
\fi
\ifpdflatex
  \newunicodechar{𝓈}{\ensuremath{s}}
\else
  \newunicodechar{𝓈}{\ensuremath{\mathcal{s}}}
\fi
\ifpdflatex
  \newunicodechar{𝓉}{\ensuremath{t}}
\else
  \newunicodechar{𝓉}{\ensuremath{\mathcal{t}}}
\fi
\ifpdflatex
  \newunicodechar{𝓊}{\ensuremath{u}}
\else
  \newunicodechar{𝓊}{\ensuremath{\mathcal{u}}}
\fi
\ifpdflatex
  \newunicodechar{𝓋}{\ensuremath{v}}
\else
  \newunicodechar{𝓋}{\ensuremath{\mathcal{v}}}
\fi
\ifpdflatex
  \newunicodechar{𝓌}{\ensuremath{w}}
\else
  \newunicodechar{𝓌}{\ensuremath{\mathcal{w}}}
\fi
\ifpdflatex
  \newunicodechar{𝓍}{\ensuremath{x}}
\else
  \newunicodechar{𝓍}{\ensuremath{\mathcal{x}}}
\fi
\ifpdflatex
  \newunicodechar{𝓎}{\ensuremath{y}}
\else
  \newunicodechar{𝓎}{\ensuremath{\mathcal{y}}}
\fi
\ifpdflatex
  \newunicodechar{𝓏}{\ensuremath{z}}
\else
  \newunicodechar{𝓏}{\ensuremath{\mathcal{z}}}
\fi
#+end_src

#+RESULTS:
#+begin_export latex
\ifpdflatex
  \newunicodechar{𝒶}{\ensuremath{a}}
\else
  \newunicodechar{𝒶}{\ensuremath{\mathcal{a}}}
\fi
\ifpdflatex
  \newunicodechar{𝒷}{\ensuremath{b}}
\else
  \newunicodechar{𝒷}{\ensuremath{\mathcal{b}}}
\fi
\ifpdflatex
  \newunicodechar{𝒸}{\ensuremath{c}}
\else
  \newunicodechar{𝒸}{\ensuremath{\mathcal{c}}}
\fi
\ifpdflatex
  \newunicodechar{𝒹}{\ensuremath{d}}
\else
  \newunicodechar{𝒹}{\ensuremath{\mathcal{d}}}
\fi
\ifpdflatex
  \newunicodechar{ℯ}{\ensuremath{e}}
\else
  \newunicodechar{ℯ}{\ensuremath{\mathcal{e}}}
\fi
\ifpdflatex
  \newunicodechar{𝒻}{\ensuremath{f}}
\else
  \newunicodechar{𝒻}{\ensuremath{\mathcal{f}}}
\fi
\ifpdflatex
  \newunicodechar{ℊ}{\ensuremath{g}}
\else
  \newunicodechar{ℊ}{\ensuremath{\mathcal{g}}}
\fi
\ifpdflatex
  \newunicodechar{𝒽}{\ensuremath{h}}
\else
  \newunicodechar{𝒽}{\ensuremath{\mathcal{h}}}
\fi
\ifpdflatex
  \newunicodechar{𝒾}{\ensuremath{i}}
\else
  \newunicodechar{𝒾}{\ensuremath{\mathcal{i}}}
\fi
\ifpdflatex
  \newunicodechar{𝒿}{\ensuremath{j}}
\else
  \newunicodechar{𝒿}{\ensuremath{\mathcal{j}}}
\fi
\ifpdflatex
  \newunicodechar{𝓀}{\ensuremath{j}}
\else
  \newunicodechar{𝓀}{\ensuremath{\mathcal{k}}}
\fi
\ifpdflatex
  \newunicodechar{𝓁}{\ensuremath{l}}
\else
  \newunicodechar{𝓁}{\ensuremath{\mathcal{l}}}
\fi
\ifpdflatex
  \newunicodechar{𝓂}{\ensuremath{m}}
\else
  \newunicodechar{𝓂}{\ensuremath{\mathcal{m}}}
\fi
\ifpdflatex
  \newunicodechar{𝓃}{\ensuremath{n}}
\else
  \newunicodechar{𝓃}{\ensuremath{\mathcal{n}}}
\fi
\ifpdflatex
  \newunicodechar{ℴ}{\ensuremath{o}}
\else
  \newunicodechar{ℴ}{\ensuremath{\mathcal{o}}}
\fi
\ifpdflatex
  \newunicodechar{𝓅}{\ensuremath{p}}
\else
  \newunicodechar{𝓅}{\ensuremath{\mathcal{p}}}
\fi
\ifpdflatex
  \newunicodechar{𝓆}{\ensuremath{q}}
\else
  \newunicodechar{𝓆}{\ensuremath{\mathcal{q}}}
\fi
\ifpdflatex
  \newunicodechar{𝓇}{\ensuremath{r}}
\else
  \newunicodechar{𝓇}{\ensuremath{\mathcal{r}}}
\fi
\ifpdflatex
  \newunicodechar{𝓈}{\ensuremath{s}}
\else
  \newunicodechar{𝓈}{\ensuremath{\mathcal{s}}}
\fi
\ifpdflatex
  \newunicodechar{𝓉}{\ensuremath{t}}
\else
  \newunicodechar{𝓉}{\ensuremath{\mathcal{t}}}
\fi
\ifpdflatex
  \newunicodechar{𝓊}{\ensuremath{u}}
\else
  \newunicodechar{𝓊}{\ensuremath{\mathcal{u}}}
\fi
\ifpdflatex
  \newunicodechar{𝓋}{\ensuremath{v}}
\else
  \newunicodechar{𝓋}{\ensuremath{\mathcal{v}}}
\fi
\ifpdflatex
  \newunicodechar{𝓌}{\ensuremath{w}}
\else
  \newunicodechar{𝓌}{\ensuremath{\mathcal{w}}}
\fi
\ifpdflatex
  \newunicodechar{𝓍}{\ensuremath{x}}
\else
  \newunicodechar{𝓍}{\ensuremath{\mathcal{x}}}
\fi
\ifpdflatex
  \newunicodechar{𝓎}{\ensuremath{y}}
\else
  \newunicodechar{𝓎}{\ensuremath{\mathcal{y}}}
\fi
\ifpdflatex
  \newunicodechar{𝓏}{\ensuremath{z}}
\else
  \newunicodechar{𝓏}{\ensuremath{\mathcal{z}}}
\fi
#+end_export

*** Uppercase Latin
  :PROPERTIES:
  :CUSTOM_ID: Calligraphic-Uppercase-Latin
  :END:
#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((𝒜 \\mathcal{A})
          (ℬ \\mathcal{B})
          (𝒞 \\mathcal{C})
          (𝒟 \\mathcal{D})
          (ℰ \\mathcal{E})
          (ℱ \\mathcal{F})
          (𝒢 \\mathcal{G})
          (ℋ \\mathcal{H})
          (ℐ \\mathcal{I})
          (𝒥 \\mathcal{J})
          (𝒦 \\mathcal{K})
          (ℒ \\mathcal{L})
          (ℳ \\mathcal{M})
          (𝒩 \\mathcal{N})
          (𝒪 \\mathcal{O})
          (𝒫 \\mathcal{P})
          (𝒬 \\mathcal{Q})
          (ℛ \\mathcal{R})
          (𝒮 \\mathcal{S})
          (𝒯 \\mathcal{T})
          (𝒰 \\mathcal{U})
          (𝒱 \\mathcal{V})
          (𝒲 \\mathcal{W})
          (𝒳 \\mathcal{X})
          (𝒴 \\mathcal{Y})
          (𝒵 \\mathcal{Z}))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{𝒜}{\ensuremath{\mathcal{A}}}
\newunicodechar{ℬ}{\ensuremath{\mathcal{B}}}
\newunicodechar{𝒞}{\ensuremath{\mathcal{C}}}
\newunicodechar{𝒟}{\ensuremath{\mathcal{D}}}
\newunicodechar{ℰ}{\ensuremath{\mathcal{E}}}
\newunicodechar{ℱ}{\ensuremath{\mathcal{F}}}
\newunicodechar{𝒢}{\ensuremath{\mathcal{G}}}
\newunicodechar{ℋ}{\ensuremath{\mathcal{H}}}
\newunicodechar{ℐ}{\ensuremath{\mathcal{I}}}
\newunicodechar{𝒥}{\ensuremath{\mathcal{J}}}
\newunicodechar{𝒦}{\ensuremath{\mathcal{K}}}
\newunicodechar{ℒ}{\ensuremath{\mathcal{L}}}
\newunicodechar{ℳ}{\ensuremath{\mathcal{M}}}
\newunicodechar{𝒩}{\ensuremath{\mathcal{N}}}
\newunicodechar{𝒪}{\ensuremath{\mathcal{O}}}
\newunicodechar{𝒫}{\ensuremath{\mathcal{P}}}
\newunicodechar{𝒬}{\ensuremath{\mathcal{Q}}}
\newunicodechar{ℛ}{\ensuremath{\mathcal{R}}}
\newunicodechar{𝒮}{\ensuremath{\mathcal{S}}}
\newunicodechar{𝒯}{\ensuremath{\mathcal{T}}}
\newunicodechar{𝒰}{\ensuremath{\mathcal{U}}}
\newunicodechar{𝒱}{\ensuremath{\mathcal{V}}}
\newunicodechar{𝒲}{\ensuremath{\mathcal{W}}}
\newunicodechar{𝒳}{\ensuremath{\mathcal{X}}}
\newunicodechar{𝒴}{\ensuremath{\mathcal{Y}}}
\newunicodechar{𝒵}{\ensuremath{\mathcal{Z}}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{𝒜}{\ensuremath{\mathcal{A}}}
\newunicodechar{ℬ}{\ensuremath{\mathcal{B}}}
\newunicodechar{𝒞}{\ensuremath{\mathcal{C}}}
\newunicodechar{𝒟}{\ensuremath{\mathcal{D}}}
\newunicodechar{ℰ}{\ensuremath{\mathcal{E}}}
\newunicodechar{ℱ}{\ensuremath{\mathcal{F}}}
\newunicodechar{𝒢}{\ensuremath{\mathcal{G}}}
\newunicodechar{ℋ}{\ensuremath{\mathcal{H}}}
\newunicodechar{ℐ}{\ensuremath{\mathcal{I}}}
\newunicodechar{𝒥}{\ensuremath{\mathcal{J}}}
\newunicodechar{𝒦}{\ensuremath{\mathcal{K}}}
\newunicodechar{ℒ}{\ensuremath{\mathcal{L}}}
\newunicodechar{ℳ}{\ensuremath{\mathcal{M}}}
\newunicodechar{𝒩}{\ensuremath{\mathcal{N}}}
\newunicodechar{𝒪}{\ensuremath{\mathcal{O}}}
\newunicodechar{𝒫}{\ensuremath{\mathcal{P}}}
\newunicodechar{𝒬}{\ensuremath{\mathcal{Q}}}
\newunicodechar{ℛ}{\ensuremath{\mathcal{R}}}
\newunicodechar{𝒮}{\ensuremath{\mathcal{S}}}
\newunicodechar{𝒯}{\ensuremath{\mathcal{T}}}
\newunicodechar{𝒰}{\ensuremath{\mathcal{U}}}
\newunicodechar{𝒱}{\ensuremath{\mathcal{V}}}
\newunicodechar{𝒲}{\ensuremath{\mathcal{W}}}
\newunicodechar{𝒳}{\ensuremath{\mathcal{X}}}
\newunicodechar{𝒴}{\ensuremath{\mathcal{Y}}}
\newunicodechar{𝒵}{\ensuremath{\mathcal{Z}}}
#+end_export

** 𝑩old-font
   :PROPERTIES:
   :CUSTOM_ID: Bold-font
   :END:
*** Lowercase Latin
  :PROPERTIES:
  :CUSTOM_ID: Bold-font-Lowercase-Latin
  :END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((𝒂 \\mathbf{a})
          (𝒃 \\mathbf{b})
          (𝒄 \\mathbf{c})
          (𝒅 \\mathbf{d})
          (𝒆 \\mathbf{e})
          (𝒇 \\mathbf{f})
          (𝒈 \\mathbf{g})
          (𝒉 \\mathbf{h})
          (𝒊 \\mathbf{i})
          (𝒋 \\mathbf{j})
          (𝒌 \\mathbf{k})
          (𝒌 \\mathbf{l})
          (𝒍 \\mathbf{m})
          (𝒏 \\mathbf{n})
          (𝒐 \\mathbf{o})
          (𝒑 \\mathbf{p})
          (𝒒 \\mathbf{q})
          (𝒓 \\mathbf{r})
          (𝒔 \\mathbf{s})
          (𝒕 \\mathbf{t})
          (𝒖 \\mathbf{u})
          (𝒗 \\mathbf{v})
          (𝒘 \\mathbf{w})
          (𝒙 \\mathbf{x})
          (𝒚 \\mathbf{y})
          (𝒛 \\mathbf{z}))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{𝒂}{\ensuremath{\mathbf{a}}}
\newunicodechar{𝒃}{\ensuremath{\mathbf{b}}}
\newunicodechar{𝒄}{\ensuremath{\mathbf{c}}}
\newunicodechar{𝒅}{\ensuremath{\mathbf{d}}}
\newunicodechar{𝒆}{\ensuremath{\mathbf{e}}}
\newunicodechar{𝒇}{\ensuremath{\mathbf{f}}}
\newunicodechar{𝒈}{\ensuremath{\mathbf{g}}}
\newunicodechar{𝒉}{\ensuremath{\mathbf{h}}}
\newunicodechar{𝒊}{\ensuremath{\mathbf{i}}}
\newunicodechar{𝒋}{\ensuremath{\mathbf{j}}}
\newunicodechar{𝒌}{\ensuremath{\mathbf{k}}}
\newunicodechar{𝒌}{\ensuremath{\mathbf{l}}}
\newunicodechar{𝒍}{\ensuremath{\mathbf{m}}}
\newunicodechar{𝒏}{\ensuremath{\mathbf{n}}}
\newunicodechar{𝒐}{\ensuremath{\mathbf{o}}}
\newunicodechar{𝒑}{\ensuremath{\mathbf{p}}}
\newunicodechar{𝒒}{\ensuremath{\mathbf{q}}}
\newunicodechar{𝒓}{\ensuremath{\mathbf{r}}}
\newunicodechar{𝒔}{\ensuremath{\mathbf{s}}}
\newunicodechar{𝒕}{\ensuremath{\mathbf{t}}}
\newunicodechar{𝒖}{\ensuremath{\mathbf{u}}}
\newunicodechar{𝒗}{\ensuremath{\mathbf{v}}}
\newunicodechar{𝒘}{\ensuremath{\mathbf{w}}}
\newunicodechar{𝒙}{\ensuremath{\mathbf{x}}}
\newunicodechar{𝒚}{\ensuremath{\mathbf{y}}}
\newunicodechar{𝒛}{\ensuremath{\mathbf{z}}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{𝒂}{\ensuremath{\mathbf{a}}}
\newunicodechar{𝒃}{\ensuremath{\mathbf{b}}}
\newunicodechar{𝒄}{\ensuremath{\mathbf{c}}}
\newunicodechar{𝒅}{\ensuremath{\mathbf{d}}}
\newunicodechar{𝒆}{\ensuremath{\mathbf{e}}}
\newunicodechar{𝒇}{\ensuremath{\mathbf{f}}}
\newunicodechar{𝒈}{\ensuremath{\mathbf{g}}}
\newunicodechar{𝒉}{\ensuremath{\mathbf{h}}}
\newunicodechar{𝒊}{\ensuremath{\mathbf{i}}}
\newunicodechar{𝒋}{\ensuremath{\mathbf{j}}}
\newunicodechar{𝒌}{\ensuremath{\mathbf{k}}}
\newunicodechar{𝒌}{\ensuremath{\mathbf{l}}}
\newunicodechar{𝒍}{\ensuremath{\mathbf{m}}}
\newunicodechar{𝒏}{\ensuremath{\mathbf{n}}}
\newunicodechar{𝒐}{\ensuremath{\mathbf{o}}}
\newunicodechar{𝒑}{\ensuremath{\mathbf{p}}}
\newunicodechar{𝒒}{\ensuremath{\mathbf{q}}}
\newunicodechar{𝒓}{\ensuremath{\mathbf{r}}}
\newunicodechar{𝒔}{\ensuremath{\mathbf{s}}}
\newunicodechar{𝒕}{\ensuremath{\mathbf{t}}}
\newunicodechar{𝒖}{\ensuremath{\mathbf{u}}}
\newunicodechar{𝒗}{\ensuremath{\mathbf{v}}}
\newunicodechar{𝒘}{\ensuremath{\mathbf{w}}}
\newunicodechar{𝒙}{\ensuremath{\mathbf{x}}}
\newunicodechar{𝒚}{\ensuremath{\mathbf{y}}}
\newunicodechar{𝒛}{\ensuremath{\mathbf{z}}}
#+end_export

*** Uppercase Latin
  :PROPERTIES:
  :CUSTOM_ID: Bold-font-Uppercase-Latin
  :END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((𝑨 \\mathbf{A})
          (𝑩 \\mathbf{B})
          (𝑪 \\mathbf{C})
          (𝑫 \\mathbf{D})
          (𝑬 \\mathbf{E})
          (𝑭 \\mathbf{F})
          (𝑮 \\mathbf{G})
          (𝑯 \\mathbf{H})
          (𝑰 \\mathbf{I})
          (𝑱 \\mathbf{J})
          (𝑲 \\mathbf{K})
          (𝑳 \\mathbf{L})
          (𝑴 \\mathbf{M})
          (𝑵 \\mathbf{N})
          (𝑶 \\mathbf{O})
          (𝑷 \\mathbf{P})
          (𝑸 \\mathbf{Q})
          (𝑹 \\mathbf{R})
          (𝑺 \\mathbf{S})
          (𝑻 \\mathbf{T})
          (𝑼 \\mathbf{U})
          (𝑽 \\mathbf{V})
          (𝑾 \\mathbf{W})
          (𝑿 \\mathbf{X})
          (𝒀 \\mathbf{Y})
          (𝒁 \\mathbf{Z}))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{𝑨}{\ensuremath{\mathbf{A}}}
\newunicodechar{𝑩}{\ensuremath{\mathbf{B}}}
\newunicodechar{𝑪}{\ensuremath{\mathbf{C}}}
\newunicodechar{𝑫}{\ensuremath{\mathbf{D}}}
\newunicodechar{𝑬}{\ensuremath{\mathbf{E}}}
\newunicodechar{𝑭}{\ensuremath{\mathbf{F}}}
\newunicodechar{𝑮}{\ensuremath{\mathbf{G}}}
\newunicodechar{𝑯}{\ensuremath{\mathbf{H}}}
\newunicodechar{𝑰}{\ensuremath{\mathbf{I}}}
\newunicodechar{𝑱}{\ensuremath{\mathbf{J}}}
\newunicodechar{𝑲}{\ensuremath{\mathbf{K}}}
\newunicodechar{𝑳}{\ensuremath{\mathbf{L}}}
\newunicodechar{𝑴}{\ensuremath{\mathbf{M}}}
\newunicodechar{𝑵}{\ensuremath{\mathbf{N}}}
\newunicodechar{𝑶}{\ensuremath{\mathbf{O}}}
\newunicodechar{𝑷}{\ensuremath{\mathbf{P}}}
\newunicodechar{𝑸}{\ensuremath{\mathbf{Q}}}
\newunicodechar{𝑹}{\ensuremath{\mathbf{R}}}
\newunicodechar{𝑺}{\ensuremath{\mathbf{S}}}
\newunicodechar{𝑻}{\ensuremath{\mathbf{T}}}
\newunicodechar{𝑼}{\ensuremath{\mathbf{U}}}
\newunicodechar{𝑽}{\ensuremath{\mathbf{V}}}
\newunicodechar{𝑾}{\ensuremath{\mathbf{W}}}
\newunicodechar{𝑿}{\ensuremath{\mathbf{X}}}
\newunicodechar{𝒀}{\ensuremath{\mathbf{Y}}}
\newunicodechar{𝒁}{\ensuremath{\mathbf{Z}}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{𝑨}{\ensuremath{\mathbf{A}}}
\newunicodechar{𝑩}{\ensuremath{\mathbf{B}}}
\newunicodechar{𝑪}{\ensuremath{\mathbf{C}}}
\newunicodechar{𝑫}{\ensuremath{\mathbf{D}}}
\newunicodechar{𝑬}{\ensuremath{\mathbf{E}}}
\newunicodechar{𝑭}{\ensuremath{\mathbf{F}}}
\newunicodechar{𝑮}{\ensuremath{\mathbf{G}}}
\newunicodechar{𝑯}{\ensuremath{\mathbf{H}}}
\newunicodechar{𝑰}{\ensuremath{\mathbf{I}}}
\newunicodechar{𝑱}{\ensuremath{\mathbf{J}}}
\newunicodechar{𝑲}{\ensuremath{\mathbf{K}}}
\newunicodechar{𝑳}{\ensuremath{\mathbf{L}}}
\newunicodechar{𝑴}{\ensuremath{\mathbf{M}}}
\newunicodechar{𝑵}{\ensuremath{\mathbf{N}}}
\newunicodechar{𝑶}{\ensuremath{\mathbf{O}}}
\newunicodechar{𝑷}{\ensuremath{\mathbf{P}}}
\newunicodechar{𝑸}{\ensuremath{\mathbf{Q}}}
\newunicodechar{𝑹}{\ensuremath{\mathbf{R}}}
\newunicodechar{𝑺}{\ensuremath{\mathbf{S}}}
\newunicodechar{𝑻}{\ensuremath{\mathbf{T}}}
\newunicodechar{𝑼}{\ensuremath{\mathbf{U}}}
\newunicodechar{𝑽}{\ensuremath{\mathbf{V}}}
\newunicodechar{𝑾}{\ensuremath{\mathbf{W}}}
\newunicodechar{𝑿}{\ensuremath{\mathbf{X}}}
\newunicodechar{𝒀}{\ensuremath{\mathbf{Y}}}
\newunicodechar{𝒁}{\ensuremath{\mathbf{Z}}}
#+end_export

** 𝓑old 𝓒alligraphic
   :PROPERTIES:
   :CUSTOM_ID: 𝓑old-𝓒alligraphic
   :END:

#+begin_src latex
% For bold calligraphic letters
\ifpdflatex
  \DeclareMathAlphabet\mathbfcal{OMS}{cmsy}{b}{n}
\fi
#+end_src

#+RESULTS:
#+begin_export latex
% For bold calligraphic letters
\ifpdflatex
  \DeclareMathAlphabet\mathbfcal{OMS}{cmsy}{b}{n}
\fi
#+end_export

*** Lowercase Latin
  :PROPERTIES:
  :CUSTOM_ID: Bold-Calligraphic-Lowercase-Latin
  :END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((𝓪 \\mathbfcal{a})
          (𝓫 \\mathbfcal{b})
          (𝓬 \\mathbfcal{c})
          (𝓭 \\mathbfcal{d})
          (𝓮 \\mathbfcal{e})
          (𝓯 \\mathbfcal{f})
          (𝓰 \\mathbfcal{g})
          (𝓱 \\mathbfcal{h})
          (𝓲 \\mathbfcal{i})
          (𝓳 \\mathbfcal{j})
          (𝓴 \\mathbfcal{k})
          (𝓵 \\mathbfcal{l})
          (𝓶 \\mathbfcal{m})
          (𝓷 \\mathbfcal{n})
          (𝓸 \\mathbfcal{o})
          (𝓹 \\mathbfcal{p})
          (𝓺 \\mathbfcal{q})
          (𝓻 \\mathbfcal{r})
          (𝓼 \\mathbfcal{s})
          (𝓽 \\mathbfcal{t})
          (𝓾 \\mathbfcal{u})
          (𝓿 \\mathbfcal{v})
          (𝔀 \\mathbfcal{w})
          (𝔁 \\mathbfcal{x})
          (𝔂 \\mathbfcal{y})
          (𝔃 \\mathbfcal{z}))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{𝓪}{\ensuremath{\mathbfcal{a}}}
\newunicodechar{𝓫}{\ensuremath{\mathbfcal{b}}}
\newunicodechar{𝓬}{\ensuremath{\mathbfcal{c}}}
\newunicodechar{𝓭}{\ensuremath{\mathbfcal{d}}}
\newunicodechar{𝓮}{\ensuremath{\mathbfcal{e}}}
\newunicodechar{𝓯}{\ensuremath{\mathbfcal{f}}}
\newunicodechar{𝓰}{\ensuremath{\mathbfcal{g}}}
\newunicodechar{𝓱}{\ensuremath{\mathbfcal{h}}}
\newunicodechar{𝓲}{\ensuremath{\mathbfcal{i}}}
\newunicodechar{𝓳}{\ensuremath{\mathbfcal{j}}}
\newunicodechar{𝓴}{\ensuremath{\mathbfcal{k}}}
\newunicodechar{𝓵}{\ensuremath{\mathbfcal{l}}}
\newunicodechar{𝓶}{\ensuremath{\mathbfcal{m}}}
\newunicodechar{𝓷}{\ensuremath{\mathbfcal{n}}}
\newunicodechar{𝓸}{\ensuremath{\mathbfcal{o}}}
\newunicodechar{𝓹}{\ensuremath{\mathbfcal{p}}}
\newunicodechar{𝓺}{\ensuremath{\mathbfcal{q}}}
\newunicodechar{𝓻}{\ensuremath{\mathbfcal{r}}}
\newunicodechar{𝓼}{\ensuremath{\mathbfcal{s}}}
\newunicodechar{𝓽}{\ensuremath{\mathbfcal{t}}}
\newunicodechar{𝓾}{\ensuremath{\mathbfcal{u}}}
\newunicodechar{𝓿}{\ensuremath{\mathbfcal{v}}}
\newunicodechar{𝔀}{\ensuremath{\mathbfcal{w}}}
\newunicodechar{𝔁}{\ensuremath{\mathbfcal{x}}}
\newunicodechar{𝔂}{\ensuremath{\mathbfcal{y}}}
\newunicodechar{𝔃}{\ensuremath{\mathbfcal{z}}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{𝓪}{\ensuremath{\mathbfcal{a}}}
\newunicodechar{𝓫}{\ensuremath{\mathbfcal{b}}}
\newunicodechar{𝓬}{\ensuremath{\mathbfcal{c}}}
\newunicodechar{𝓭}{\ensuremath{\mathbfcal{d}}}
\newunicodechar{𝓮}{\ensuremath{\mathbfcal{e}}}
\newunicodechar{𝓯}{\ensuremath{\mathbfcal{f}}}
\newunicodechar{𝓰}{\ensuremath{\mathbfcal{g}}}
\newunicodechar{𝓱}{\ensuremath{\mathbfcal{h}}}
\newunicodechar{𝓲}{\ensuremath{\mathbfcal{i}}}
\newunicodechar{𝓳}{\ensuremath{\mathbfcal{j}}}
\newunicodechar{𝓴}{\ensuremath{\mathbfcal{k}}}
\newunicodechar{𝓵}{\ensuremath{\mathbfcal{l}}}
\newunicodechar{𝓶}{\ensuremath{\mathbfcal{m}}}
\newunicodechar{𝓷}{\ensuremath{\mathbfcal{n}}}
\newunicodechar{𝓸}{\ensuremath{\mathbfcal{o}}}
\newunicodechar{𝓹}{\ensuremath{\mathbfcal{p}}}
\newunicodechar{𝓺}{\ensuremath{\mathbfcal{q}}}
\newunicodechar{𝓻}{\ensuremath{\mathbfcal{r}}}
\newunicodechar{𝓼}{\ensuremath{\mathbfcal{s}}}
\newunicodechar{𝓽}{\ensuremath{\mathbfcal{t}}}
\newunicodechar{𝓾}{\ensuremath{\mathbfcal{u}}}
\newunicodechar{𝓿}{\ensuremath{\mathbfcal{v}}}
\newunicodechar{𝔀}{\ensuremath{\mathbfcal{w}}}
\newunicodechar{𝔁}{\ensuremath{\mathbfcal{x}}}
\newunicodechar{𝔂}{\ensuremath{\mathbfcal{y}}}
\newunicodechar{𝔃}{\ensuremath{\mathbfcal{z}}}
#+end_export

*** Uppercase Latin
  :PROPERTIES:
  :CUSTOM_ID: Bold-Calligraphic-Uppercase-Latin
  :END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((𝓐 \\mathbfcal{A})
          (𝓑 \\mathbfcal{B})
          (𝓒 \\mathbfcal{C})
          (𝓓 \\mathbfcal{D})
          (𝓔 \\mathbfcal{E})
          (𝓕 \\mathbfcal{F})
          (𝓖 \\mathbfcal{G})
          (𝓗 \\mathbfcal{H})
          (𝓘 \\mathbfcal{I})
          (𝓙 \\mathbfcal{J})
          (𝓚 \\mathbfcal{K})
          (𝓛 \\mathbfcal{L})
          (𝓜 \\mathbfcal{M})
          (𝓝 \\mathbfcal{N})
          (𝓞 \\mathbfcal{O})
          (𝓟 \\mathbfcal{P})
          (𝓠 \\mathbfcal{Q})
          (𝓡 \\mathbfcal{R})
          (𝓢 \\mathbfcal{S})
          (𝓣 \\mathbfcal{T})
          (𝓤 \\mathbfcal{U})
          (𝓥 \\mathbfcal{V})
          (𝓦 \\mathbfcal{W})
          (𝓧 \\mathbfcal{X})
          (𝓨 \\mathbfcal{Y})
          (𝓩 \\mathbfcal{Z}))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{𝓐}{\ensuremath{\mathbfcal{A}}}
\newunicodechar{𝓑}{\ensuremath{\mathbfcal{B}}}
\newunicodechar{𝓒}{\ensuremath{\mathbfcal{C}}}
\newunicodechar{𝓓}{\ensuremath{\mathbfcal{D}}}
\newunicodechar{𝓔}{\ensuremath{\mathbfcal{E}}}
\newunicodechar{𝓕}{\ensuremath{\mathbfcal{F}}}
\newunicodechar{𝓖}{\ensuremath{\mathbfcal{G}}}
\newunicodechar{𝓗}{\ensuremath{\mathbfcal{H}}}
\newunicodechar{𝓘}{\ensuremath{\mathbfcal{I}}}
\newunicodechar{𝓙}{\ensuremath{\mathbfcal{J}}}
\newunicodechar{𝓚}{\ensuremath{\mathbfcal{K}}}
\newunicodechar{𝓛}{\ensuremath{\mathbfcal{L}}}
\newunicodechar{𝓜}{\ensuremath{\mathbfcal{M}}}
\newunicodechar{𝓝}{\ensuremath{\mathbfcal{N}}}
\newunicodechar{𝓞}{\ensuremath{\mathbfcal{O}}}
\newunicodechar{𝓟}{\ensuremath{\mathbfcal{P}}}
\newunicodechar{𝓠}{\ensuremath{\mathbfcal{Q}}}
\newunicodechar{𝓡}{\ensuremath{\mathbfcal{R}}}
\newunicodechar{𝓢}{\ensuremath{\mathbfcal{S}}}
\newunicodechar{𝓣}{\ensuremath{\mathbfcal{T}}}
\newunicodechar{𝓤}{\ensuremath{\mathbfcal{U}}}
\newunicodechar{𝓥}{\ensuremath{\mathbfcal{V}}}
\newunicodechar{𝓦}{\ensuremath{\mathbfcal{W}}}
\newunicodechar{𝓧}{\ensuremath{\mathbfcal{X}}}
\newunicodechar{𝓨}{\ensuremath{\mathbfcal{Y}}}
\newunicodechar{𝓩}{\ensuremath{\mathbfcal{Z}}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{𝓐}{\ensuremath{\mathbfcal{A}}}
\newunicodechar{𝓑}{\ensuremath{\mathbfcal{B}}}
\newunicodechar{𝓒}{\ensuremath{\mathbfcal{C}}}
\newunicodechar{𝓓}{\ensuremath{\mathbfcal{D}}}
\newunicodechar{𝓔}{\ensuremath{\mathbfcal{E}}}
\newunicodechar{𝓕}{\ensuremath{\mathbfcal{F}}}
\newunicodechar{𝓖}{\ensuremath{\mathbfcal{G}}}
\newunicodechar{𝓗}{\ensuremath{\mathbfcal{H}}}
\newunicodechar{𝓘}{\ensuremath{\mathbfcal{I}}}
\newunicodechar{𝓙}{\ensuremath{\mathbfcal{J}}}
\newunicodechar{𝓚}{\ensuremath{\mathbfcal{K}}}
\newunicodechar{𝓛}{\ensuremath{\mathbfcal{L}}}
\newunicodechar{𝓜}{\ensuremath{\mathbfcal{M}}}
\newunicodechar{𝓝}{\ensuremath{\mathbfcal{N}}}
\newunicodechar{𝓞}{\ensuremath{\mathbfcal{O}}}
\newunicodechar{𝓟}{\ensuremath{\mathbfcal{P}}}
\newunicodechar{𝓠}{\ensuremath{\mathbfcal{Q}}}
\newunicodechar{𝓡}{\ensuremath{\mathbfcal{R}}}
\newunicodechar{𝓢}{\ensuremath{\mathbfcal{S}}}
\newunicodechar{𝓣}{\ensuremath{\mathbfcal{T}}}
\newunicodechar{𝓤}{\ensuremath{\mathbfcal{U}}}
\newunicodechar{𝓥}{\ensuremath{\mathbfcal{V}}}
\newunicodechar{𝓦}{\ensuremath{\mathbfcal{W}}}
\newunicodechar{𝓧}{\ensuremath{\mathbfcal{X}}}
\newunicodechar{𝓨}{\ensuremath{\mathbfcal{Y}}}
\newunicodechar{𝓩}{\ensuremath{\mathbfcal{Z}}}
#+end_export

* Other letters or letterlike symbols
  :PROPERTIES:
  :CUSTOM_ID: Other-letters-or-letterlike-symbols
  :END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((ℓ \\ell))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{ℓ}{\ensuremath{\ell}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{ℓ}{\ensuremath{\ell}}
#+end_export

* Greek alphabet
  :PROPERTIES:
  :CUSTOM_ID: Greek-alphabet
  :END:
** Normal
   :PROPERTIES:
   :CUSTOM_ID: Normal
   :END:

#+begin_src emacs-lisp :eval no-export
<<generator>>
(let ((the-translations
        '((α  \\alpha)
          (Α  A \\Alpha)
          (β  \\beta)
          (Β  B \\Beta)
          (γ  \\gamma)
          (Γ  \\Gamma)
          (δ  \\delta)
          (Δ  \\Delta)
          (ϵ  \\epsilon)
          (Ε  E \\Epsilon)
          (ζ  \\zeta)
          (Ζ  Z \\Zeta)
          (η  \\eta)
          (Η  H \\Eta)
          (θ  \\theta)
          (Θ  \\Theta)
          (ι  \\iota)
          (Ι  I \\Iota)
          (κ  \\kappa)
          (Κ K \\Kappa)
          (λ  \\lambda)
          (Λ  \\Lambda)
          (μ  \\mu)
          (Μ  M \\Mu)
          (ν  \\nu)
          (Ν  N \\Nu)
          (ξ  \\xi)
          (Ξ  \\Xi)
          (ο o \\omicron)
          (Ο O \\Omicron)
          (π  \\pi)
          (Π  \\Pi)
          (ρ  \\rho)
          (Ρ P \\Rho)
          (σ  \\sigma)
          (Σ  \\Sigma)
          (τ  \\tau)
          (Τ T \\Tau)
          (υ  \\upsilon)
          (Υ  \\Upsilon)
          (ϕ  \\phi)
          (Φ  \\Phi)
          (χ  \\chi)
          (Χ  X \\Chi)
          (ψ  \\psi)
          (Ψ  \\Psi)
          (ω  \\omega)
          (Ω  \\Omega))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{α}{\ensuremath{\alpha}}
\ifpdflatex
  \newunicodechar{Α}{\ensuremath{A}}
\else
  \newunicodechar{Α}{\ensuremath{\Alpha}}
\fi
\newunicodechar{β}{\ensuremath{\beta}}
\ifpdflatex
  \newunicodechar{Β}{\ensuremath{B}}
\else
  \newunicodechar{Β}{\ensuremath{\Beta}}
\fi
\newunicodechar{γ}{\ensuremath{\gamma}}
\newunicodechar{Γ}{\ensuremath{\Gamma}}
\newunicodechar{δ}{\ensuremath{\delta}}
\newunicodechar{Δ}{\ensuremath{\Delta}}
\newunicodechar{ϵ}{\ensuremath{\epsilon}}
\ifpdflatex
  \newunicodechar{Ε}{\ensuremath{E}}
\else
  \newunicodechar{Ε}{\ensuremath{\Epsilon}}
\fi
\newunicodechar{ζ}{\ensuremath{\zeta}}
\ifpdflatex
  \newunicodechar{Ζ}{\ensuremath{Z}}
\else
  \newunicodechar{Ζ}{\ensuremath{\Zeta}}
\fi
\newunicodechar{η}{\ensuremath{\eta}}
\ifpdflatex
  \newunicodechar{Η}{\ensuremath{H}}
\else
  \newunicodechar{Η}{\ensuremath{\Eta}}
\fi
\newunicodechar{θ}{\ensuremath{\theta}}
\newunicodechar{Θ}{\ensuremath{\Theta}}
\newunicodechar{ι}{\ensuremath{\iota}}
\ifpdflatex
  \newunicodechar{Ι}{\ensuremath{I}}
\else
  \newunicodechar{Ι}{\ensuremath{\Iota}}
\fi
\newunicodechar{κ}{\ensuremath{\kappa}}
\ifpdflatex
  \newunicodechar{Κ}{\ensuremath{K}}
\else
  \newunicodechar{Κ}{\ensuremath{\Kappa}}
\fi
\newunicodechar{λ}{\ensuremath{\lambda}}
\newunicodechar{Λ}{\ensuremath{\Lambda}}
\newunicodechar{μ}{\ensuremath{\mu}}
\ifpdflatex
  \newunicodechar{Μ}{\ensuremath{M}}
\else
  \newunicodechar{Μ}{\ensuremath{\Mu}}
\fi
\newunicodechar{ν}{\ensuremath{\nu}}
\ifpdflatex
  \newunicodechar{Ν}{\ensuremath{N}}
\else
  \newunicodechar{Ν}{\ensuremath{\Nu}}
\fi
\newunicodechar{ξ}{\ensuremath{\xi}}
\newunicodechar{Ξ}{\ensuremath{\Xi}}
\ifpdflatex
  \newunicodechar{ο}{\ensuremath{o}}
\else
  \newunicodechar{ο}{\ensuremath{\omicron}}
\fi
\ifpdflatex
  \newunicodechar{Ο}{\ensuremath{O}}
\else
  \newunicodechar{Ο}{\ensuremath{\Omicron}}
\fi
\newunicodechar{π}{\ensuremath{\pi}}
\newunicodechar{Π}{\ensuremath{\Pi}}
\newunicodechar{ρ}{\ensuremath{\rho}}
\ifpdflatex
  \newunicodechar{Ρ}{\ensuremath{P}}
\else
  \newunicodechar{Ρ}{\ensuremath{\Rho}}
\fi
\newunicodechar{σ}{\ensuremath{\sigma}}
\newunicodechar{Σ}{\ensuremath{\Sigma}}
\newunicodechar{τ}{\ensuremath{\tau}}
\ifpdflatex
  \newunicodechar{Τ}{\ensuremath{T}}
\else
  \newunicodechar{Τ}{\ensuremath{\Tau}}
\fi
\newunicodechar{υ}{\ensuremath{\upsilon}}
\newunicodechar{Υ}{\ensuremath{\Upsilon}}
\newunicodechar{ϕ}{\ensuremath{\phi}}
\newunicodechar{Φ}{\ensuremath{\Phi}}
\newunicodechar{χ}{\ensuremath{\chi}}
\ifpdflatex
  \newunicodechar{Χ}{\ensuremath{X}}
\else
  \newunicodechar{Χ}{\ensuremath{\Chi}}
\fi
\newunicodechar{ψ}{\ensuremath{\psi}}
\newunicodechar{Ψ}{\ensuremath{\Psi}}
\newunicodechar{ω}{\ensuremath{\omega}}
\newunicodechar{Ω}{\ensuremath{\Omega}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{α}{\ensuremath{\alpha}}
\ifpdflatex
  \newunicodechar{Α}{\ensuremath{A}}
\else
  \newunicodechar{Α}{\ensuremath{\Alpha}}
\fi
\newunicodechar{β}{\ensuremath{\beta}}
\ifpdflatex
  \newunicodechar{Β}{\ensuremath{B}}
\else
  \newunicodechar{Β}{\ensuremath{\Beta}}
\fi
\newunicodechar{γ}{\ensuremath{\gamma}}
\newunicodechar{Γ}{\ensuremath{\Gamma}}
\newunicodechar{δ}{\ensuremath{\delta}}
\newunicodechar{Δ}{\ensuremath{\Delta}}
\newunicodechar{ϵ}{\ensuremath{\epsilon}}
\ifpdflatex
  \newunicodechar{Ε}{\ensuremath{E}}
\else
  \newunicodechar{Ε}{\ensuremath{\Epsilon}}
\fi
\newunicodechar{ζ}{\ensuremath{\zeta}}
\ifpdflatex
  \newunicodechar{Ζ}{\ensuremath{Z}}
\else
  \newunicodechar{Ζ}{\ensuremath{\Zeta}}
\fi
\newunicodechar{η}{\ensuremath{\eta}}
\ifpdflatex
  \newunicodechar{Η}{\ensuremath{H}}
\else
  \newunicodechar{Η}{\ensuremath{\Eta}}
\fi
\newunicodechar{θ}{\ensuremath{\theta}}
\newunicodechar{Θ}{\ensuremath{\Theta}}
\newunicodechar{ι}{\ensuremath{\iota}}
\ifpdflatex
  \newunicodechar{Ι}{\ensuremath{I}}
\else
  \newunicodechar{Ι}{\ensuremath{\Iota}}
\fi
\newunicodechar{κ}{\ensuremath{\kappa}}
\ifpdflatex
  \newunicodechar{Κ}{\ensuremath{K}}
\else
  \newunicodechar{Κ}{\ensuremath{\Kappa}}
\fi
\newunicodechar{λ}{\ensuremath{\lambda}}
\newunicodechar{Λ}{\ensuremath{\Lambda}}
\newunicodechar{μ}{\ensuremath{\mu}}
\ifpdflatex
  \newunicodechar{Μ}{\ensuremath{M}}
\else
  \newunicodechar{Μ}{\ensuremath{\Mu}}
\fi
\newunicodechar{ν}{\ensuremath{\nu}}
\ifpdflatex
  \newunicodechar{Ν}{\ensuremath{N}}
\else
  \newunicodechar{Ν}{\ensuremath{\Nu}}
\fi
\newunicodechar{ξ}{\ensuremath{\xi}}
\newunicodechar{Ξ}{\ensuremath{\Xi}}
\ifpdflatex
  \newunicodechar{ο}{\ensuremath{o}}
\else
  \newunicodechar{ο}{\ensuremath{\omicron}}
\fi
\ifpdflatex
  \newunicodechar{Ο}{\ensuremath{O}}
\else
  \newunicodechar{Ο}{\ensuremath{\Omicron}}
\fi
\newunicodechar{π}{\ensuremath{\pi}}
\newunicodechar{Π}{\ensuremath{\Pi}}
\newunicodechar{ρ}{\ensuremath{\rho}}
\ifpdflatex
  \newunicodechar{Ρ}{\ensuremath{P}}
\else
  \newunicodechar{Ρ}{\ensuremath{\Rho}}
\fi
\newunicodechar{σ}{\ensuremath{\sigma}}
\newunicodechar{Σ}{\ensuremath{\Sigma}}
\newunicodechar{τ}{\ensuremath{\tau}}
\ifpdflatex
  \newunicodechar{Τ}{\ensuremath{T}}
\else
  \newunicodechar{Τ}{\ensuremath{\Tau}}
\fi
\newunicodechar{υ}{\ensuremath{\upsilon}}
\newunicodechar{Υ}{\ensuremath{\Upsilon}}
\newunicodechar{ϕ}{\ensuremath{\phi}}
\newunicodechar{Φ}{\ensuremath{\Phi}}
\newunicodechar{χ}{\ensuremath{\chi}}
\ifpdflatex
  \newunicodechar{Χ}{\ensuremath{X}}
\else
  \newunicodechar{Χ}{\ensuremath{\Chi}}
\fi
\newunicodechar{ψ}{\ensuremath{\psi}}
\newunicodechar{Ψ}{\ensuremath{\Psi}}
\newunicodechar{ω}{\ensuremath{\omega}}
\newunicodechar{Ω}{\ensuremath{\Omega}}
#+end_export

** Also: ~var~-variants                                            :incomplete:
   :PROPERTIES:
   :CUSTOM_ID: var-variants
   :END:

# To make headline clickable, according to Musa's init, We cannot have them
# begin with markup, whence the superflous prefix “Also:”.

Note that some of the default Agda input entries are in this list, rather than
the default above.

Also, ~varbeta~ is missing here; it requires a choice of some other package to add
support for it.
#+begin_src emacs-lisp :eval no-export
<<generator>>
(let ((the-translations
        '((ε  \\varepsilon)
          (ϑ  \\vartheta)
          (ϰ  \\varkappa)
          (ϖ  \\varpi)
          (ς  \\varsigma)
          (φ  \\varphi))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{ε}{\ensuremath{\varepsilon}}
\newunicodechar{ϑ}{\ensuremath{\vartheta}}
\newunicodechar{ϰ}{\ensuremath{\varkappa}}
\newunicodechar{ϖ}{\ensuremath{\varpi}}
\newunicodechar{ς}{\ensuremath{\varsigma}}
\newunicodechar{φ}{\ensuremath{\varphi}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{ε}{\ensuremath{\varepsilon}}
\newunicodechar{ϑ}{\ensuremath{\vartheta}}
\newunicodechar{ϰ}{\ensuremath{\varkappa}}
\newunicodechar{ϖ}{\ensuremath{\varpi}}
\newunicodechar{ς}{\ensuremath{\varsigma}}
\newunicodechar{φ}{\ensuremath{\varphi}}
#+end_export

* Sub-, Super-, Under-, and Over-scripts
  :PROPERTIES:
  :CUSTOM_ID: Sub-Super-Under-and-Over-scripts
  :END:

Note that while the alphabetic lists are complete, *there are missing letters*,
because unfortunately Unicode does not have characters for every letter
subscript and superscript.

** Subscripts
   :PROPERTIES:
   :CUSTOM_ID: Subscripts
   :END:

Note there are no uppercase letter subscripts.

*** Lowercase alphabet
  :PROPERTIES:
  :CUSTOM_ID: Subscripts-Lowercase-alphabet
  :END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((ₐ  {}_{a})
          (ₑ  {}_{e})
          (ₕ  {}_{h})
          (ᵢ  {}_{i})
          (ⱼ  {}_{j})
          (ₖ  {}_{k})
          (ₗ  {}_{l})
          (ₘ  {}_{m})
          (ₙ  {}_{n})
          (ₒ  {}_{o})
          (ₚ  {}_{p})
          (ᵣ  {}_{r})
          (ₛ  {}_{s})
          (ₜ  {}_{t})
          (ᵤ  {}_{u})
          (ᵥ  {}_{v})
          (ₓ  {}_{x}))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{ₐ}{\ensuremath{{}_{a}}}
\newunicodechar{ₑ}{\ensuremath{{}_{e}}}
\newunicodechar{ₕ}{\ensuremath{{}_{h}}}
\newunicodechar{ᵢ}{\ensuremath{{}_{i}}}
\newunicodechar{ⱼ}{\ensuremath{{}_{j}}}
\newunicodechar{ₖ}{\ensuremath{{}_{k}}}
\newunicodechar{ₗ}{\ensuremath{{}_{l}}}
\newunicodechar{ₘ}{\ensuremath{{}_{m}}}
\newunicodechar{ₙ}{\ensuremath{{}_{n}}}
\newunicodechar{ₒ}{\ensuremath{{}_{o}}}
\newunicodechar{ₚ}{\ensuremath{{}_{p}}}
\newunicodechar{ᵣ}{\ensuremath{{}_{r}}}
\newunicodechar{ₛ}{\ensuremath{{}_{s}}}
\newunicodechar{ₜ}{\ensuremath{{}_{t}}}
\newunicodechar{ᵤ}{\ensuremath{{}_{u}}}
\newunicodechar{ᵥ}{\ensuremath{{}_{v}}}
\newunicodechar{ₓ}{\ensuremath{{}_{x}}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{ₐ}{\ensuremath{{}_{a}}}
\newunicodechar{ₑ}{\ensuremath{{}_{e}}}
\newunicodechar{ₕ}{\ensuremath{{}_{h}}}
\newunicodechar{ᵢ}{\ensuremath{{}_{i}}}
\newunicodechar{ⱼ}{\ensuremath{{}_{j}}}
\newunicodechar{ₖ}{\ensuremath{{}_{k}}}
\newunicodechar{ₗ}{\ensuremath{{}_{l}}}
\newunicodechar{ₘ}{\ensuremath{{}_{m}}}
\newunicodechar{ₙ}{\ensuremath{{}_{n}}}
\newunicodechar{ₒ}{\ensuremath{{}_{o}}}
\newunicodechar{ₚ}{\ensuremath{{}_{p}}}
\newunicodechar{ᵣ}{\ensuremath{{}_{r}}}
\newunicodechar{ₛ}{\ensuremath{{}_{s}}}
\newunicodechar{ₜ}{\ensuremath{{}_{t}}}
\newunicodechar{ᵤ}{\ensuremath{{}_{u}}}
\newunicodechar{ᵥ}{\ensuremath{{}_{v}}}
\newunicodechar{ₓ}{\ensuremath{{}_{x}}}
#+end_export

*** Numeric
  :PROPERTIES:
  :CUSTOM_ID: Subscripts-Numeric
  :END:
#+begin_src emacs-lisp :wrap src latex
(let ((the-translations
        '((₀  {}_{0})
          (₁  {}_{1})
          (₂  {}_{2})
          (₃  {}_{3})
          (₄  {}_{4})
          (₅  {}_{5})
          (₆  {}_{6})
          (₇  {}_{7})
          (₈  {}_{8})
          (₉  {}_{9}))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{₀}{\ensuremath{{}_{0}}}
\newunicodechar{₁}{\ensuremath{{}_{1}}}
\newunicodechar{₂}{\ensuremath{{}_{2}}}
\newunicodechar{₃}{\ensuremath{{}_{3}}}
\newunicodechar{₄}{\ensuremath{{}_{4}}}
\newunicodechar{₅}{\ensuremath{{}_{5}}}
\newunicodechar{₆}{\ensuremath{{}_{6}}}
\newunicodechar{₇}{\ensuremath{{}_{7}}}
\newunicodechar{₈}{\ensuremath{{}_{8}}}
\newunicodechar{₉}{\ensuremath{{}_{9}}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{₀}{\ensuremath{{}_{0}}}
\newunicodechar{₁}{\ensuremath{{}_{1}}}
\newunicodechar{₂}{\ensuremath{{}_{2}}}
\newunicodechar{₃}{\ensuremath{{}_{3}}}
\newunicodechar{₄}{\ensuremath{{}_{4}}}
\newunicodechar{₅}{\ensuremath{{}_{5}}}
\newunicodechar{₆}{\ensuremath{{}_{6}}}
\newunicodechar{₇}{\ensuremath{{}_{7}}}
\newunicodechar{₈}{\ensuremath{{}_{8}}}
\newunicodechar{₉}{\ensuremath{{}_{9}}}
#+end_export

*** Other
  :PROPERTIES:
  :CUSTOM_ID: Subscripts-Other
  :END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((₊ {}_{+})
          (₋ {}_{-})
          (₌ {}_{=})
          )))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{₊}{\ensuremath{{}_{+}}}
\newunicodechar{₋}{\ensuremath{{}_{-}}}
\newunicodechar{₌}{\ensuremath{{}_{=}}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{₊}{\ensuremath{{}_{+}}}
\newunicodechar{₋}{\ensuremath{{}_{-}}}
\newunicodechar{₌}{\ensuremath{{}_{=}}}
#+end_export

# To contrast with subscript addition ‘₊’, one may use subscript letter ‘x’ as a
# subscript multiplication.
# \newunicodechar{ₓ}{\ensuremath{_{\times}}}

** Superscripts
   :PROPERTIES:
   :CUSTOM_ID: Superscripts
   :END:

*** Uppercase alphabet
  :PROPERTIES:
  :CUSTOM_ID: Supscripts-Uppercase-alphabet
  :END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((ᴬ  {}^{A})
          (ᴮ  {}^{B})
          (ᴰ  {}^{D})
          (ᴱ  {}^{E})
          (ᴳ  {}^{G})
          (ᴴ  {}^{H})
          (ᴵ  {}^{I})
          (ᴶ  {}^{J})
          (ᴷ  {}^{K})
          (ᴸ  {}^{L})
          (ᴹ  {}^{M})
          (ᴺ  {}^{N})
          (ᴼ  {}^{O})
          (ᴾ  {}^{P})
          (ᴿ  {}^{R})
          (ᵀ  {}^{T})
          (ᵁ  {}^{U})
          (ⱽ  {}^{V})
          (ᵂ  {}^{W}))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{ᴬ}{\ensuremath{{}^{A}}}
\newunicodechar{ᴮ}{\ensuremath{{}^{B}}}
\newunicodechar{ᴰ}{\ensuremath{{}^{D}}}
\newunicodechar{ᴱ}{\ensuremath{{}^{E}}}
\newunicodechar{ᴳ}{\ensuremath{{}^{G}}}
\newunicodechar{ᴴ}{\ensuremath{{}^{H}}}
\newunicodechar{ᴵ}{\ensuremath{{}^{I}}}
\newunicodechar{ᴶ}{\ensuremath{{}^{J}}}
\newunicodechar{ᴷ}{\ensuremath{{}^{K}}}
\newunicodechar{ᴸ}{\ensuremath{{}^{L}}}
\newunicodechar{ᴹ}{\ensuremath{{}^{M}}}
\newunicodechar{ᴺ}{\ensuremath{{}^{N}}}
\newunicodechar{ᴼ}{\ensuremath{{}^{O}}}
\newunicodechar{ᴾ}{\ensuremath{{}^{P}}}
\newunicodechar{ᴿ}{\ensuremath{{}^{R}}}
\newunicodechar{ᵀ}{\ensuremath{{}^{T}}}
\newunicodechar{ᵁ}{\ensuremath{{}^{U}}}
\newunicodechar{ⱽ}{\ensuremath{{}^{V}}}
\newunicodechar{ᵂ}{\ensuremath{{}^{W}}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{ᴬ}{\ensuremath{{}^{A}}}
\newunicodechar{ᴮ}{\ensuremath{{}^{B}}}
\newunicodechar{ᴰ}{\ensuremath{{}^{D}}}
\newunicodechar{ᴱ}{\ensuremath{{}^{E}}}
\newunicodechar{ᴳ}{\ensuremath{{}^{G}}}
\newunicodechar{ᴴ}{\ensuremath{{}^{H}}}
\newunicodechar{ᴵ}{\ensuremath{{}^{I}}}
\newunicodechar{ᴶ}{\ensuremath{{}^{J}}}
\newunicodechar{ᴷ}{\ensuremath{{}^{K}}}
\newunicodechar{ᴸ}{\ensuremath{{}^{L}}}
\newunicodechar{ᴹ}{\ensuremath{{}^{M}}}
\newunicodechar{ᴺ}{\ensuremath{{}^{N}}}
\newunicodechar{ᴼ}{\ensuremath{{}^{O}}}
\newunicodechar{ᴾ}{\ensuremath{{}^{P}}}
\newunicodechar{ᴿ}{\ensuremath{{}^{R}}}
\newunicodechar{ᵀ}{\ensuremath{{}^{T}}}
\newunicodechar{ᵁ}{\ensuremath{{}^{U}}}
\newunicodechar{ⱽ}{\ensuremath{{}^{V}}}
\newunicodechar{ᵂ}{\ensuremath{{}^{W}}}
#+end_export

*** Lowercase alphabet
  :PROPERTIES:
  :CUSTOM_ID: Supscripts-Lowercase-alphabet
  :END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((ᵃ  {}^{a})
          (ᵇ  {}^{b})
          (ᶜ  {}^{c})
          (ᵈ  {}^{d})
          (ᵉ  {}^{e})
          (ᶠ  {}^{f})
          (ᵍ  {}^{g})
          (ʰ  {}^{h})
          (ⁱ  {}^{i})
          (ʲ  {}^{j})
          (ᵏ  {}^{k})
          (ˡ  {}^{l})
          (ᵐ  {}^{m})
          (ⁿ  {}^{n})
          (ᵒ  {}^{o})
          (ᵖ  {}^{p})
          (ʳ  {}^{r})
          (ˢ  {}^{s})
          (ᵗ  {}^{t})
          (ᵘ  {}^{u})
          (ᵛ  {}^{v})
          (ʷ  {}^{w})
          (ˣ  {}^{x})
          (ʸ  {}^{y})
          (ᶻ  {}^{z}))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{ᵃ}{\ensuremath{{}^{a}}}
\newunicodechar{ᵇ}{\ensuremath{{}^{b}}}
\newunicodechar{ᶜ}{\ensuremath{{}^{c}}}
\newunicodechar{ᵈ}{\ensuremath{{}^{d}}}
\newunicodechar{ᵉ}{\ensuremath{{}^{e}}}
\newunicodechar{ᶠ}{\ensuremath{{}^{f}}}
\newunicodechar{ᵍ}{\ensuremath{{}^{g}}}
\newunicodechar{ʰ}{\ensuremath{{}^{h}}}
\newunicodechar{ⁱ}{\ensuremath{{}^{i}}}
\newunicodechar{ʲ}{\ensuremath{{}^{j}}}
\newunicodechar{ᵏ}{\ensuremath{{}^{k}}}
\newunicodechar{ˡ}{\ensuremath{{}^{l}}}
\newunicodechar{ᵐ}{\ensuremath{{}^{m}}}
\newunicodechar{ⁿ}{\ensuremath{{}^{n}}}
\newunicodechar{ᵒ}{\ensuremath{{}^{o}}}
\newunicodechar{ᵖ}{\ensuremath{{}^{p}}}
\newunicodechar{ʳ}{\ensuremath{{}^{r}}}
\newunicodechar{ˢ}{\ensuremath{{}^{s}}}
\newunicodechar{ᵗ}{\ensuremath{{}^{t}}}
\newunicodechar{ᵘ}{\ensuremath{{}^{u}}}
\newunicodechar{ᵛ}{\ensuremath{{}^{v}}}
\newunicodechar{ʷ}{\ensuremath{{}^{w}}}
\newunicodechar{ˣ}{\ensuremath{{}^{x}}}
\newunicodechar{ʸ}{\ensuremath{{}^{y}}}
\newunicodechar{ᶻ}{\ensuremath{{}^{z}}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{ᵃ}{\ensuremath{{}^{a}}}
\newunicodechar{ᵇ}{\ensuremath{{}^{b}}}
\newunicodechar{ᶜ}{\ensuremath{{}^{c}}}
\newunicodechar{ᵈ}{\ensuremath{{}^{d}}}
\newunicodechar{ᵉ}{\ensuremath{{}^{e}}}
\newunicodechar{ᶠ}{\ensuremath{{}^{f}}}
\newunicodechar{ᵍ}{\ensuremath{{}^{g}}}
\newunicodechar{ʰ}{\ensuremath{{}^{h}}}
\newunicodechar{ⁱ}{\ensuremath{{}^{i}}}
\newunicodechar{ʲ}{\ensuremath{{}^{j}}}
\newunicodechar{ᵏ}{\ensuremath{{}^{k}}}
\newunicodechar{ˡ}{\ensuremath{{}^{l}}}
\newunicodechar{ᵐ}{\ensuremath{{}^{m}}}
\newunicodechar{ⁿ}{\ensuremath{{}^{n}}}
\newunicodechar{ᵒ}{\ensuremath{{}^{o}}}
\newunicodechar{ᵖ}{\ensuremath{{}^{p}}}
\newunicodechar{ʳ}{\ensuremath{{}^{r}}}
\newunicodechar{ˢ}{\ensuremath{{}^{s}}}
\newunicodechar{ᵗ}{\ensuremath{{}^{t}}}
\newunicodechar{ᵘ}{\ensuremath{{}^{u}}}
\newunicodechar{ᵛ}{\ensuremath{{}^{v}}}
\newunicodechar{ʷ}{\ensuremath{{}^{w}}}
\newunicodechar{ˣ}{\ensuremath{{}^{x}}}
\newunicodechar{ʸ}{\ensuremath{{}^{y}}}
\newunicodechar{ᶻ}{\ensuremath{{}^{z}}}
#+end_export

*** Numeric
    :PROPERTIES:
    :CUSTOM_ID: Numeric
    :END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((⁰  {}^{0})
          (¹  {}^{1})
          (²  {}^{2})
          (³  {}^{3})
          (⁴  {}^{4})
          (⁵  {}^{5})
          (⁶  {}^{6})
          (⁷  {}^{7})
          (⁸  {}^{8})
          (⁹  {}^{9}))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{⁰}{\ensuremath{{}^{0}}}
\newunicodechar{¹}{\ensuremath{{}^{1}}}
\newunicodechar{²}{\ensuremath{{}^{2}}}
\newunicodechar{³}{\ensuremath{{}^{3}}}
\newunicodechar{⁴}{\ensuremath{{}^{4}}}
\newunicodechar{⁵}{\ensuremath{{}^{5}}}
\newunicodechar{⁶}{\ensuremath{{}^{6}}}
\newunicodechar{⁷}{\ensuremath{{}^{7}}}
\newunicodechar{⁸}{\ensuremath{{}^{8}}}
\newunicodechar{⁹}{\ensuremath{{}^{9}}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{⁰}{\ensuremath{{}^{0}}}
\newunicodechar{¹}{\ensuremath{{}^{1}}}
\newunicodechar{²}{\ensuremath{{}^{2}}}
\newunicodechar{³}{\ensuremath{{}^{3}}}
\newunicodechar{⁴}{\ensuremath{{}^{4}}}
\newunicodechar{⁵}{\ensuremath{{}^{5}}}
\newunicodechar{⁶}{\ensuremath{{}^{6}}}
\newunicodechar{⁷}{\ensuremath{{}^{7}}}
\newunicodechar{⁸}{\ensuremath{{}^{8}}}
\newunicodechar{⁹}{\ensuremath{{}^{9}}}
#+end_export

*** Other
  :PROPERTIES:
  :CUSTOM_ID: Superscripts-Other
  :END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((⁺  {}^{+})
          (⁻  {}^{-})
          (⁼  {}^{=})
          )))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{⁺}{\ensuremath{{}^{+}}}
\newunicodechar{⁻}{\ensuremath{{}^{-}}}
\newunicodechar{⁼}{\ensuremath{{}^{=}}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{⁺}{\ensuremath{{}^{+}}}
\newunicodechar{⁻}{\ensuremath{{}^{-}}}
\newunicodechar{⁼}{\ensuremath{{}^{=}}}
#+end_export

* Punctuation and Delimiters
  :PROPERTIES:
  :CUSTOM_ID: Punctuation-and-Delimiters
  :END:

** Dots
   :PROPERTIES:
   :CUSTOM_ID: Dots
   :END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((…  \\ldots)
          (⋯  \\cdots)
          (⋮  \\vdots))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{…}{\ensuremath{\ldots}}
\newunicodechar{⋯}{\ensuremath{\cdots}}
\newunicodechar{⋮}{\ensuremath{\vdots}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{…}{\ensuremath{\ldots}}
\newunicodechar{⋯}{\ensuremath{\cdots}}
\newunicodechar{⋮}{\ensuremath{\vdots}}
#+end_export

** Dashes
   :PROPERTIES:
   :CUSTOM_ID: Dashes
   :END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((– \\text{--})
          (— \\text{---}))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{–}{\ensuremath{\text{--}}}
\newunicodechar{—}{\ensuremath{\text{---}}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{–}{\ensuremath{\text{--}}}
\newunicodechar{—}{\ensuremath{\text{---}}}
#+end_export

# \newunicodechar{─}{\text{---}}

** Parentheses, braces and brackets
   :PROPERTIES:
   :CUSTOM_ID: Parentheses-braces-and-brackets
   :END:

# This section will yell at you if you have parentheses matching
# turned on for these symbols.

Note there are a few different braces I translate the same way.
Braces and parentheses themselves are special characters in Agda,
so they cannot be used in names.

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((⦅ \(\\!|)
          (⦆ |\\!\))
          (⟨ \\langle)
          (⟩ \\rangle)
          (⦃ \\{\\!\\mid)
          (⦄ \\mid\\!\\})
          (⟪ \\langle\\!\\langle)
          (⟫ \\rangle\\!\\rangle)
          (⁅ \\{)
          (⁆ \\})
          (｛ \\{)
          (｝ \\}))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{⦅}{\ensuremath{(\!|}}
\newunicodechar{⦆}{\ensuremath{|\!)}}
\newunicodechar{⟨}{\ensuremath{\langle}}
\newunicodechar{⟩}{\ensuremath{\rangle}}
\newunicodechar{⦃}{\ensuremath{\{\!\mid}}
\newunicodechar{⦄}{\ensuremath{\mid\!\}}}
\newunicodechar{⟪}{\ensuremath{\langle\!\langle}}
\newunicodechar{⟫}{\ensuremath{\rangle\!\rangle}}
\newunicodechar{⁅}{\ensuremath{\{}}
\newunicodechar{⁆}{\ensuremath{\}}}
\newunicodechar{｛}{\ensuremath{\{}}
\newunicodechar{｝}{\ensuremath{\}}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{⦅}{\ensuremath{(\!|}}
\newunicodechar{⦆}{\ensuremath{|\!)}}
\newunicodechar{⟨}{\ensuremath{\langle}}
\newunicodechar{⟩}{\ensuremath{\rangle}}
\newunicodechar{⦃}{\ensuremath{\{\!\mid}}
\newunicodechar{⦄}{\ensuremath{\mid\!\}}}
\newunicodechar{⟪}{\ensuremath{\langle\!\langle}}
\newunicodechar{⟫}{\ensuremath{\rangle\!\rangle}}
\newunicodechar{⁅}{\ensuremath{\{}}
\newunicodechar{⁆}{\ensuremath{\}}}
\newunicodechar{｛}{\ensuremath{\{}}
\newunicodechar{｝}{\ensuremath{\}}}
#+end_export

# Brackets, [], are Emacs Lisp syntax for vectors.
# So we declare the following manually.
#+begin_src latex
\newunicodechar{⟦}{\ensuremath{[\![}}
\newunicodechar{⟧}{\ensuremath{]\!]}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{⟦}{\ensuremath{[\![}}
\newunicodechar{⟧}{\ensuremath{]\!]}}
#+end_export

** Other paired delimiters
   :PROPERTIES:
   :CUSTOM_ID: Other-paired-delimiters
   :END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((⌜  \\ulcorner)
          (⌝  \\urcorner)
          (⌞  \\llcorner)
          (⌟  \\lrcorner)
          (⌈  \\lceil)
          (⌉  \\rceil)
          (⌊  \\lfloor)
          (⌋  \\rfloor))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{⌜}{\ensuremath{\ulcorner}}
\newunicodechar{⌝}{\ensuremath{\urcorner}}
\newunicodechar{⌞}{\ensuremath{\llcorner}}
\newunicodechar{⌟}{\ensuremath{\lrcorner}}
\newunicodechar{⌈}{\ensuremath{\lceil}}
\newunicodechar{⌉}{\ensuremath{\rceil}}
\newunicodechar{⌊}{\ensuremath{\lfloor}}
\newunicodechar{⌋}{\ensuremath{\rfloor}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{⌜}{\ensuremath{\ulcorner}}
\newunicodechar{⌝}{\ensuremath{\urcorner}}
\newunicodechar{⌞}{\ensuremath{\llcorner}}
\newunicodechar{⌟}{\ensuremath{\lrcorner}}
\newunicodechar{⌈}{\ensuremath{\lceil}}
\newunicodechar{⌉}{\ensuremath{\rceil}}
\newunicodechar{⌊}{\ensuremath{\lfloor}}
\newunicodechar{⌋}{\ensuremath{\rfloor}}
#+end_export

** Whitespace
   :PROPERTIES:
   :CUSTOM_ID: Whitespace
   :END:

# ~ is a special variable in Lisp, so the usual generator fails here.
# We just write this manually.
Non-breaking space. Though it may appear as a normal space, it is in fact a ~~~ in
the LaTeX ---in classic LaTeX one writes ~\,~.
#+begin_src latex
\newunicodechar{ }{\ensuremath{~}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{ }{\ensuremath{~}}
#+end_export

I am a very long line whose words are separated by non-breaking spaces so I should run off the page at least at any reasonable font size ^_^.
#
# TODO: Musa: Unicode smileys do not work for me using pdflatex.

* Logic
  :PROPERTIES:
  :CUSTOM_ID: Logic
  :END:

** Prepositional
   :PROPERTIES:
   :CUSTOM_ID: Prepositional
   :END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((≡  \\equiv)
          (¬  \\lnot)
          (≢  \\not\\equiv) ;; Negation of symbols in LaTeX is typically achieved prepending it with \not.
          (∨  \\lor)
          (∧  \\land)
          (⇒  \\\;\\Rightarrow\\\;)
          (⇐  \\\;\\Leftarrow\\\;)
          (⟺ \\iff)
          (⇔  \\iff))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{≡}{\ensuremath{\equiv}}
\newunicodechar{¬}{\ensuremath{\lnot}}
\newunicodechar{≢}{\ensuremath{\not\equiv}}
\newunicodechar{∨}{\ensuremath{\lor}}
\newunicodechar{∧}{\ensuremath{\land}}
\newunicodechar{⇒}{\ensuremath{\;\Rightarrow\;}}
\newunicodechar{⇐}{\ensuremath{\;\Leftarrow\;}}
\newunicodechar{⟺}{\ensuremath{\iff}}
\newunicodechar{⇔}{\ensuremath{\iff}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{≡}{\ensuremath{\equiv}}
\newunicodechar{¬}{\ensuremath{\lnot}}
\newunicodechar{≢}{\ensuremath{\not\equiv}}
\newunicodechar{∨}{\ensuremath{\lor}}
\newunicodechar{∧}{\ensuremath{\land}}
\newunicodechar{⇒}{\ensuremath{\;\Rightarrow\;}}
\newunicodechar{⇐}{\ensuremath{\;\Leftarrow\;}}
\newunicodechar{⟺}{\ensuremath{\iff}}
\newunicodechar{⇔}{\ensuremath{\iff}}
#+end_export

** Predicate
   :PROPERTIES:
   :CUSTOM_ID: Predicate
   :END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((∀  \\forall)
          (∃  \\exists)
          )))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{∀}{\ensuremath{\forall}}
\newunicodechar{∃}{\ensuremath{\exists}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{∀}{\ensuremath{\forall}}
\newunicodechar{∃}{\ensuremath{\exists}}
#+end_export

# Comma is a Lisp operator, so we write the following manually.
#+begin_src latex
\newunicodechar{❙}{\ensuremath{\,\mid\,}}
\newunicodechar{•}{\ensuremath{\,\bullet\,}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{❙}{\ensuremath{\,\mid\,}}
\newunicodechar{•}{\ensuremath{\,\bullet\,}}
#+end_export

** Model ---Entailment
   :PROPERTIES:
   :CUSTOM_ID: Model-Entailment
   :END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((⊢ \\vdash)
          (⊣ \\dashv)
          (⊨ \\vDash))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{⊢}{\ensuremath{\vdash}}
\newunicodechar{⊣}{\ensuremath{\dashv}}
\newunicodechar{⊨}{\ensuremath{\vDash}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{⊢}{\ensuremath{\vdash}}
\newunicodechar{⊣}{\ensuremath{\dashv}}
\newunicodechar{⊨}{\ensuremath{\vDash}}
#+end_export

* Sets, relations and functions
  :PROPERTIES:
  :CUSTOM_ID: Sets-relations-and-functions
  :END:

** Sets
   :PROPERTIES:
   :CUSTOM_ID: Sets
   :END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((ø \\emptyset)
          (∅ \\emptyset)
          (∈ \\in)
          (∉ \\not\\in)
          (∋ \\ni)
          (⊆ \\subseteq)
          (∩ \\cap)
          (∪ \\cup)
          (⊍ \\uplus) ;; u., as opposed to u+
          (⊎ \\uplus))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{ø}{\ensuremath{\emptyset}}
\newunicodechar{∅}{\ensuremath{\emptyset}}
\newunicodechar{∈}{\ensuremath{\in}}
\newunicodechar{∉}{\ensuremath{\not\in}}
\newunicodechar{∋}{\ensuremath{\ni}}
\newunicodechar{⊆}{\ensuremath{\subseteq}}
\newunicodechar{∩}{\ensuremath{\cap}}
\newunicodechar{∪}{\ensuremath{\cup}}
\newunicodechar{⊍}{\ensuremath{\uplus}}
\newunicodechar{⊎}{\ensuremath{\uplus}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{ø}{\ensuremath{\emptyset}}
\newunicodechar{∅}{\ensuremath{\emptyset}}
\newunicodechar{∈}{\ensuremath{\in}}
\newunicodechar{∉}{\ensuremath{\not\in}}
\newunicodechar{∋}{\ensuremath{\ni}}
\newunicodechar{⊆}{\ensuremath{\subseteq}}
\newunicodechar{∩}{\ensuremath{\cap}}
\newunicodechar{∪}{\ensuremath{\cup}}
\newunicodechar{⊍}{\ensuremath{\uplus}}
\newunicodechar{⊎}{\ensuremath{\uplus}}
#+end_export

** Relation operators
   :PROPERTIES:
   :CUSTOM_ID: Relation-operators
   :END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((⊤ \\top)
          (⊥ \\bot)
          (⊔ \\sqcup)
          (⊓ \\sqcap)
          ;; Residuals
          (╲ \\backslash)
          (╱ /)
          )))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{⊤}{\ensuremath{\top}}
\newunicodechar{⊥}{\ensuremath{\bot}}
\newunicodechar{⊔}{\ensuremath{\sqcup}}
\newunicodechar{⊓}{\ensuremath{\sqcap}}
\newunicodechar{╲}{\ensuremath{\backslash}}
\newunicodechar{╱}{\ensuremath{/}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{⊤}{\ensuremath{\top}}
\newunicodechar{⊥}{\ensuremath{\bot}}
\newunicodechar{⊔}{\ensuremath{\sqcup}}
\newunicodechar{⊓}{\ensuremath{\sqcap}}
\newunicodechar{╲}{\ensuremath{\backslash}}
\newunicodechar{╱}{\ensuremath{/}}
#+end_export

** Function operators
   :PROPERTIES:
   :CUSTOM_ID: Function-operators
   :END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((∘ \\circ)
          (↦ \\mapsto)
          (↪ \\hookrightarrow)
          )))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{∘}{\ensuremath{\circ}}
\newunicodechar{↦}{\ensuremath{\mapsto}}
\newunicodechar{↪}{\ensuremath{\hookrightarrow}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{∘}{\ensuremath{\circ}}
\newunicodechar{↦}{\ensuremath{\mapsto}}
\newunicodechar{↪}{\ensuremath{\hookrightarrow}}
#+end_export

** Relations
   :PROPERTIES:
   :CUSTOM_ID: Relations
   :END:

*** Equality like
    :PROPERTIES:
    :CUSTOM_ID: Equality-like
    :END:

Along with negations where they exist. Note that equivalences are within the
[[Logic]] section.
#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((≠ \\neq)
          (≐ \\doteq)
          (≟ \\stackrel{?}{=})
          (≅ \\cong)
          (≇ \\ncong)
          (≃ \\simeq)
          (≄ \\not\\simeq)
          (≈ \\approx)
          (≉ \\not\\approx)
          (∼ \\sim)
          (≁ \\not\\sim)
          (≔ :\\!=))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{≠}{\ensuremath{\neq}}
\newunicodechar{≐}{\ensuremath{\doteq}}
\newunicodechar{≟}{\ensuremath{\stackrel{?}{=}}}
\newunicodechar{≅}{\ensuremath{\cong}}
\newunicodechar{≇}{\ensuremath{\ncong}}
\newunicodechar{≃}{\ensuremath{\simeq}}
\newunicodechar{≄}{\ensuremath{\not\simeq}}
\newunicodechar{≈}{\ensuremath{\approx}}
\newunicodechar{≉}{\ensuremath{\not\approx}}
\newunicodechar{∼}{\ensuremath{\sim}}
\newunicodechar{≁}{\ensuremath{\not\sim}}
\newunicodechar{≔}{\ensuremath{:\!=}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{≠}{\ensuremath{\neq}}
\newunicodechar{≐}{\ensuremath{\doteq}}
\newunicodechar{≟}{\ensuremath{\stackrel{?}{=}}}
\newunicodechar{≅}{\ensuremath{\cong}}
\newunicodechar{≇}{\ensuremath{\ncong}}
\newunicodechar{≃}{\ensuremath{\simeq}}
\newunicodechar{≄}{\ensuremath{\not\simeq}}
\newunicodechar{≈}{\ensuremath{\approx}}
\newunicodechar{≉}{\ensuremath{\not\approx}}
\newunicodechar{∼}{\ensuremath{\sim}}
\newunicodechar{≁}{\ensuremath{\not\sim}}
\newunicodechar{≔}{\ensuremath{:\!=}}
#+end_export

*** Order like
    :PROPERTIES:
    :CUSTOM_ID: Order-like
    :END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((≤ \\leq)
          (≰ \\nleq)
          (≥ \\geq)
          (≱ \\ngeq)
          (≮ \\nless)
          (≯ \\ngtr)
          (≦ \\leqq)
          (≨ \\lneqq)
          (≧ \\geqq)
          (≩ \\gneqq)
          (≲ \\lesssim)
          (≳ \\gtrsim)
          (⊏ \\sqsubset)
          (⊑ \\sqsubseteq)
          (⊐ \\sqsupset)
          (⊒ \\sqsupseteq)
          (∣ \\mid))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{≤}{\ensuremath{\leq}}
\newunicodechar{≰}{\ensuremath{\nleq}}
\newunicodechar{≥}{\ensuremath{\geq}}
\newunicodechar{≱}{\ensuremath{\ngeq}}
\newunicodechar{≮}{\ensuremath{\nless}}
\newunicodechar{≯}{\ensuremath{\ngtr}}
\newunicodechar{≦}{\ensuremath{\leqq}}
\newunicodechar{≨}{\ensuremath{\lneqq}}
\newunicodechar{≧}{\ensuremath{\geqq}}
\newunicodechar{≩}{\ensuremath{\gneqq}}
\newunicodechar{≲}{\ensuremath{\lesssim}}
\newunicodechar{≳}{\ensuremath{\gtrsim}}
\newunicodechar{⊏}{\ensuremath{\sqsubset}}
\newunicodechar{⊑}{\ensuremath{\sqsubseteq}}
\newunicodechar{⊐}{\ensuremath{\sqsupset}}
\newunicodechar{⊒}{\ensuremath{\sqsupseteq}}
\newunicodechar{∣}{\ensuremath{\mid}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{≤}{\ensuremath{\leq}}
\newunicodechar{≰}{\ensuremath{\nleq}}
\newunicodechar{≥}{\ensuremath{\geq}}
\newunicodechar{≱}{\ensuremath{\ngeq}}
\newunicodechar{≮}{\ensuremath{\nless}}
\newunicodechar{≯}{\ensuremath{\ngtr}}
\newunicodechar{≦}{\ensuremath{\leqq}}
\newunicodechar{≨}{\ensuremath{\lneqq}}
\newunicodechar{≧}{\ensuremath{\geqq}}
\newunicodechar{≩}{\ensuremath{\gneqq}}
\newunicodechar{≲}{\ensuremath{\lesssim}}
\newunicodechar{≳}{\ensuremath{\gtrsim}}
\newunicodechar{⊏}{\ensuremath{\sqsubset}}
\newunicodechar{⊑}{\ensuremath{\sqsubseteq}}
\newunicodechar{⊐}{\ensuremath{\sqsupset}}
\newunicodechar{⊒}{\ensuremath{\sqsupseteq}}
\newunicodechar{∣}{\ensuremath{\mid}}
#+end_export

* Generic or other operators
  :PROPERTIES:
  :CUSTOM_ID: Generic-or-other-operators
  :END:

** Arrows
   :PROPERTIES:
   :CUSTOM_ID: Arrows
   :END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((→  \\rightarrow)
          (⇨  \\rightarrow) ;; Fixme
          (➩  \\rightarrow) ;; Fixme
          (⟿ \\rightsquigarrow) ;; Reduction, rewrite system
          (←  \\leftarrow)
          (↔  \\leftrightarrow)
          (↑  \\uparrow)
          (↓  \\downarrow)
          (⇊  \\downarrow\\downarrow)
          (⟶  \\longrightarrow)
          (⟵ \\longleftarrow))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{→}{\ensuremath{\rightarrow}}
\newunicodechar{⇨}{\ensuremath{\rightarrow}}
\newunicodechar{➩}{\ensuremath{\rightarrow}}
\newunicodechar{⟿}{\ensuremath{\rightsquigarrow}}
\newunicodechar{←}{\ensuremath{\leftarrow}}
\newunicodechar{↔}{\ensuremath{\leftrightarrow}}
\newunicodechar{↑}{\ensuremath{\uparrow}}
\newunicodechar{↓}{\ensuremath{\downarrow}}
\newunicodechar{⇊}{\ensuremath{\downarrow\downarrow}}
\newunicodechar{⟶}{\ensuremath{\longrightarrow}}
\newunicodechar{⟵}{\ensuremath{\longleftarrow}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{→}{\ensuremath{\rightarrow}}
\newunicodechar{⇨}{\ensuremath{\rightarrow}}
\newunicodechar{➩}{\ensuremath{\rightarrow}}
\newunicodechar{⟿}{\ensuremath{\rightsquigarrow}}
\newunicodechar{←}{\ensuremath{\leftarrow}}
\newunicodechar{↔}{\ensuremath{\leftrightarrow}}
\newunicodechar{↑}{\ensuremath{\uparrow}}
\newunicodechar{↓}{\ensuremath{\downarrow}}
\newunicodechar{⇊}{\ensuremath{\downarrow\downarrow}}
\newunicodechar{⟶}{\ensuremath{\longrightarrow}}
\newunicodechar{⟵}{\ensuremath{\longleftarrow}}
#+end_export

** “o”-operators
   :PROPERTIES:
   :CUSTOM_ID: o-operators
   :END:

Agda users invoke =\o𝓍= and =\O𝓍=.

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((⊕ \\oplus)
          (⨁ \\bigoplus)
          (⊖ \\ominus)
          (⊗ \\otimes)
          (⨂ \\bigotimes)
          (⊘ \\oslash)
          (⊙ \\odot)
          (⨀ \\bigodot)
          (⊚ \\circledcirc)
          (⊛ \\circledast)
          ;; (⊜ TODO \\circledequal)
          (⊝ \\circleddash))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{⊕}{\ensuremath{\oplus}}
\newunicodechar{⨁}{\ensuremath{\bigoplus}}
\newunicodechar{⊖}{\ensuremath{\ominus}}
\newunicodechar{⊗}{\ensuremath{\otimes}}
\newunicodechar{⨂}{\ensuremath{\bigotimes}}
\newunicodechar{⊘}{\ensuremath{\oslash}}
\newunicodechar{⊙}{\ensuremath{\odot}}
\newunicodechar{⨀}{\ensuremath{\bigodot}}
\newunicodechar{⊚}{\ensuremath{\circledcirc}}
\newunicodechar{⊛}{\ensuremath{\circledast}}
\newunicodechar{⊝}{\ensuremath{\circleddash}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{⊕}{\ensuremath{\oplus}}
\newunicodechar{⨁}{\ensuremath{\bigoplus}}
\newunicodechar{⊖}{\ensuremath{\ominus}}
\newunicodechar{⊗}{\ensuremath{\otimes}}
\newunicodechar{⨂}{\ensuremath{\bigotimes}}
\newunicodechar{⊘}{\ensuremath{\oslash}}
\newunicodechar{⊙}{\ensuremath{\odot}}
\newunicodechar{⨀}{\ensuremath{\bigodot}}
\newunicodechar{⊚}{\ensuremath{\circledcirc}}
\newunicodechar{⊛}{\ensuremath{\circledast}}
\newunicodechar{⊝}{\ensuremath{\circleddash}}
#+end_export

The “directed aggregation” operator ‘⟴’ is obtained with the Agda input method
using =\r=.
#+begin_src latex
\DeclareMathOperator{\VCCompose}{\longrightarrow\hspace{-3.5ex}\oplus\;}
\newunicodechar{⟴}{\ensuremath{\!\!\VCCompose}}
#+end_src

#+RESULTS:
#+begin_export latex
\DeclareMathOperator{\VCCompose}{\longrightarrow\hspace{-3.5ex}\oplus\;}
\newunicodechar{⟴}{\ensuremath{\!\!\VCCompose}}
#+end_export

** TODO COMMENT Small, halfwidth and fullwidth math symbols
   :PROPERTIES:
   :CUSTOM_ID: COMMENT-Small-halfwidth-and-fullwidth-math-symbols
   :END:

For small characters, we use ~scalebox~ on the corresponding symbols, and ~raisebox~
to correct for height.
#+begin_src emacs-lisp
(when nil
<<generator>>
(let ((the-translations
        '((﹡ \\raisebox{.4\\height}{\\scalebox{.6}{*}})
          (﹢ \\raisebox{.4\\height}{\\scalebox{.6}{+}})
          (﹣ \\raisebox{.4\\height}{\\scalebox{.6}{-}})
          (﹤ \\raisebox{.4\\height}{\\scalebox{.6}{<}})
          (﹥ \\raisebox{.4\\height}{\\scalebox{.6}{>}})
          (﹦ \\raisebox{.4\\height}{\\scalebox{.6}{=}})
          (﹨ \\raisebox{.4\\height}{\\scalebox{.6}{\\backslash}}))))
  (generate-newunicodechars the-translations)))
#+end_src

#+RESULTS:
#+begin_src latex
#+end_src

#+RESULTS:
#+begin_export latex
#+end_export


For fullwidth characters, we place them in a ~1em~ box.
Note the “plain TeX” method for obtaining a non-raised tilde here.
#+begin_src emacs-lisp
(when nil
<<generator>>
(let ((the-translations
         '((＋  \\makebox\[1em\]{+})
          (＜  \\makebox\[1em\]{<})
          (＝  \\makebox\[1em\]{=})
          (＞  \\makebox\[1em\]{>})
          (＾  \\makebox\[1em\]{\\textasciicircum})
          (｜  \\makebox\[1em\]{|})
          (～  \\makebox\[1em\]{\\char\`\\~})
          (￢  \\makebox\[1em\]{\\lnot}))))
  (generate-newunicodechars the-translations)))
#+end_src

#+RESULTS:
#+begin_src latex
#+end_src

#+RESULTS:
#+begin_export latex
#+end_export

So far, I haven't devised a good solution for the halfwidth arrows.
I just substitute the regular arrows in.
#+begin_src emacs-lisp
(when nil
<<generator>>
(let ((the-translations
        '((￩  \\leftarrow)
          (￪  \\uparrow)
          (￫  \\rightarrow)
          (￬  \\downarrow))))
  (generate-newunicodechars the-translations)))
#+end_src

#+RESULTS:
#+begin_src latex
#+end_src

#+RESULTS:
#+begin_export latex
#+end_export

** Punctuation-like
   :PROPERTIES:
   :CUSTOM_ID: Punctuation-like
   :END:

# TODO: Musa: These do not even appear in the PDF generated by Mark.
# ⇒ Mark, are you using a --nonstopmode when generating PDFs?

# ; (∶  \\ratio)
#           ; (⨾  \\fcmp)

The ‘∶’ below is a “ghost colon” that Agda users enter with =\:=. Its function is
to provide an identifier that looks like a colon, but is not a colon ---which is
a reserved syntactical item in Agda. Main uses of the ghost colon are for
quantifier notation to indicate the type of dummy variables.
- We almost always want to display it as a normal colon.

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '(
          (‼ !\\!!) ;; Array indexing
          (∶ :)     ;; Ghost colon
          )))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{‼}{\ensuremath{!\!!}}
\newunicodechar{∶}{\ensuremath{:}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{‼}{\ensuremath{!\!!}}
\newunicodechar{∶}{\ensuremath{:}}
#+end_export

** Others
   :PROPERTIES:
   :CUSTOM_ID: Others
   :END:

# TODO: Mark: I changed the lualatex command for ∷; perhaps
# it will work for pdflatex as well?

Probably some of these belong somewhere else.
#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((∙ \\cdot)
          (∞ \\infty)
          (∷ :: \\Colon))))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{∙}{\ensuremath{\cdot}}
\newunicodechar{∞}{\ensuremath{\infty}}
\ifpdflatex
  \newunicodechar{∷}{\ensuremath{::}}
\else
  \newunicodechar{∷}{\ensuremath{\Colon}}
\fi
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{∙}{\ensuremath{\cdot}}
\newunicodechar{∞}{\ensuremath{\infty}}
\ifpdflatex
  \newunicodechar{∷}{\ensuremath{::}}
\else
  \newunicodechar{∷}{\ensuremath{\Colon}}
\fi
#+end_export

* Check- & X-marks, and Primes & Ticks
  :PROPERTIES:
  :CUSTOM_ID: Check-X-marks-and-Primes-Ticks
  :END:

** Check- and X-marks
:PROPERTIES:
:CUSTOM_ID: Check--and-X-marks
:END:

#+begin_src emacs-lisp
<<generator>>
(let ((the-translations
        '((✔ \\checkmark)
          (✓ \\checkmark)
          (❌ \\times)
          )))
  (generate-newunicodechars the-translations))
#+end_src

#+RESULTS:
#+begin_src latex
\newunicodechar{✔}{\ensuremath{\checkmark}}
\newunicodechar{✓}{\ensuremath{\checkmark}}
\newunicodechar{❌}{\ensuremath{\times}}
#+end_src

#+RESULTS:
#+begin_export latex
\newunicodechar{✔}{\ensuremath{\checkmark}}
\newunicodechar{❌}{\ensuremath{\times}}
#+end_export

** COMMENT Primes and ticks
:PROPERTIES:
:CUSTOM_ID: COMMENT-Primes-and-ticks
:END:

Regarding prime characters in LuaLatex and XeLaTeX,
as discussed [[https://tex.stackexchange.com/questions/486120/][here]], the prime characters are redefined
by the ~unicode-math~ package at
~\begindocument~. To redefine them, we would need to override that by wrapping our
~\newunicodechar~ declarations in ~\AtBeginDocument~.
Unfortunately we would then lose prime collapsing.
The better solution is to use a font which has prime, or
else avoid using double primes, etc..

Note that the below solution for ~pdflatex~ also does not provide
prime collapsing.

# Quote, ', is an operator in Lisp, so we write these ones out manually.
#+begin_src latex
\newunicodechar{′}{'}
\newunicodechar{″}{''}
\newunicodechar{‵}{\ensuremath{`}}
\newunicodechar{‶}{\ensuremath{``}}
#+end_src

* TODO Misc
  :PROPERTIES:
  :CUSTOM_ID: COMMENT-misc
  :END:

# +latex_header: \newunicodechar{⨾}{;}

#+begin_src latex :noeval
\newunicodechar{̈}{\ensuremath{^{..}}}

\newunicodechar{‿}{CONVERSE}
\newunicodechar{⁻}{\ensuremath{{}^{-}}}
\newunicodechar{□}{\ensuremath{QED}}
% +latex_header: \newunicodechar{∎}{\ensuremath{QED}}
\newunicodechar{○}{\ensuremath{\circ}}

\newunicodechar{♯}{\ensuremath{SHARP}}
\newunicodechar{́}{\ensuremath{'}}

% Agda: \Mi𝓍
 \newunicodechar{𝑝}{p}
 \newunicodechar{𝑎}{a}
 \newunicodechar{𝑟}{r}
 \newunicodechar{𝑒}{e}
 \newunicodechar{𝑛}{n}
 \newunicodechar{𝑡}{t}
 \newunicodechar{𝑚}{m}
 \newunicodechar{𝑙}{l}
 \newunicodechar{𝑠}{s}
 \newunicodechar{𝑜}{o}
 \newunicodechar{𝑓}{f}
#+end_src

* TODO COMMENT Smilies                                         :XeLaTeX_Only:
  :PROPERTIES:
  :CUSTOM_ID: COMMENT-Smilies
  :END:

I have not found a reliable way to produce smilies in LaTeX.
In LuaLaTeX and XeLaTeX, it should work to just use
the unicode characters themselves,
making sure to use a font that supports them.
DejaVu Sans does so.
#+begin_src latex
\ifpdflatex\else
  \newfontfamily\DejaSans{DejaVu Sans}
}
#+end_src

#+RESULTS:
#+begin_export latex
\ifpdflatex\else
  \newfontfamily\DejaSans{DejaVu Sans}
}
#+end_export

So these characters can only be used if you use LuaLaTeX or XeLaTeX.
#+begin_src emacs-lisp
(when nil
<<generator>>
(let ((the-translations
        '((😀  😀)
          (😁  😁)
          (😐  😐)
          (😵  😵)
          (🙁  🙁))))
  (generate-newunicodechars the-translations "{\\DejaSans ")))
#+end_src

#+RESULTS:
#+begin_src latex
#+end_src

#+RESULTS:
#+begin_export latex
#+end_export


# accomodate for only xelatex
#+begin_src latex
\ifpdflatex\else
  \newunicodechar{😀}{{\DejaSans 😀}}
  \newunicodechar{😁}{{\DejaSans 😁}}
  \newunicodechar{😐}{{\DejaSans 😐}}
  \newunicodechar{😵}{{\DejaSans 😵}}
  \newunicodechar{🙁}{{\DejaSans 🙁}}
}
#+end_src

#+RESULTS:
#+begin_export latex
\ifpdflatex\else
  \newunicodechar{😀}{{\DejaSans 😀}}
  \newunicodechar{😁}{{\DejaSans 😁}}
  \newunicodechar{😐}{{\DejaSans 😐}}
  \newunicodechar{😵}{{\DejaSans 😵}}
  \newunicodechar{🙁}{{\DejaSans 🙁}}
}
#+end_export

* COMMENT Old
  :PROPERTIES:
  :CUSTOM_ID: COMMENT-Old
  :END:

** Other operators
   :PROPERTIES:
   :CUSTOM_ID: Other-operators
   :END:

#+begin_src latex
%---------------------------------------------------------------------
% Other operators
%---------------------------------------------------------------------
\newunicodechar{⊕}{\ensuremath{\mathrm{⊕}}}
\newunicodechar{⊗}{\ensuremath{\mathrm{⊗}}}
\newunicodechar{⊛}{\ensuremath{\mathrm{⊛}}}
\newunicodechar{⊘}{\ensuremath{\mathrm{⊘}}}
\newunicodechar{∣}{\ensuremath{\mathrm{∣}}}
\newunicodechar{∷}{\ensuremath{\mathrm{∷}}}
\newunicodechar{≟}{\ensuremath{\mathrm{≟}}}
\newunicodechar{≔}{\ensuremath{\mathrm{≔}}}
\newunicodechar{≈}{\ensuremath{\mathrm{≈}}}
\newunicodechar{⟶}{\ensuremath{\mathrm{⟶}}}
\newunicodechar{⇓}{\ensuremath{\mathrm{⇓}}}
#+end_src

#+RESULTS:
#+begin_export latex
%---------------------------------------------------------------------
% Other operators
%---------------------------------------------------------------------
\newunicodechar{⊕}{\ensuremath{\mathrm{⊕}}}
\newunicodechar{⊗}{\ensuremath{\mathrm{⊗}}}
\newunicodechar{⊛}{\ensuremath{\mathrm{⊛}}}
\newunicodechar{⊘}{\ensuremath{\mathrm{⊘}}}
\newunicodechar{∣}{\ensuremath{\mathrm{∣}}}
\newunicodechar{∷}{\ensuremath{\mathrm{∷}}}
\newunicodechar{≟}{\ensuremath{\mathrm{≟}}}
\newunicodechar{≔}{\ensuremath{\mathrm{≔}}}
\newunicodechar{≈}{\ensuremath{\mathrm{≈}}}
\newunicodechar{⟶}{\ensuremath{\mathrm{⟶}}}
\newunicodechar{⇓}{\ensuremath{\mathrm{⇓}}}
#+end_export

* Package footer                                :noexport:
  :PROPERTIES:
  :CUSTOM_ID: Package-footer
  :END:

#+begin_src latex
\endinput
#+end_src

#+RESULTS:
#+begin_export latex
\endinput
#+end_export
